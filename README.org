#+title: Loopy: A Looping and Iteration Macro

=loopy= is a macro meant for iterating and looping.  It is similar in usage to
[[https://www.gnu.org/software/emacs/manual/html_node/cl/Loop-Facility.html][cl-loop]] but uses symbolic expressions rather than keywords.

=loopy= should be complementary to the features provided the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html][Seq]] and [[https://www.gnu.org/software/emacs/manual/html_node/cl/index.html][CL]]
libraries (including =cl-loop=) and Emacs's regular looping and mapping
features.

* Table of Contents                                                     :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#introduction][Introduction]]
- [[#how-to-use][How to use]]
  - [[#macro-arguments][Macro Arguments]]
  - [[#loop-commands][Loop Commands]]
    - [[#commands-for-generic-evaluation][Commands for Generic Evaluation]]
    - [[#iteration-and-looping-commands][Iteration and Looping Commands]]
    - [[#accumulation-commands][Accumulation Commands]]
    - [[#control-flow][Control Flow]]
      - [[#conditionals][Conditionals]]
      - [[#skipping-an-iteration][Skipping an Iteration]]
      - [[#exiting-the-loop-early][Exiting the Loop Early]]
- [[#adding-custom-commands][Adding Custom Commands]]
  - [[#background-information][Background Information]]
  - [[#a-small-example][A Small Example]]
  - [[#a-slightly-more-complicated-example][A Slightly More Complicated Example]]
- [[#how-does-it-compare-to-cl-loop][How does it compare to =cl-loop=?]]
  - [[#translating-from-cl-loop][Translating from =cl-loop=]]
    - [[#for-clauses][For Clauses]]
    - [[#iteration-clauses][Iteration Clauses]]
    - [[#accumulation-clauses][Accumulation Clauses]]
    - [[#other-clauses][Other Clauses]]
-  [[#real-world-examples][Real-World Examples]]
#+END_QUOTE

* Introduction

  The =loopy= macro has several possible arguments, each beginning with a
  keyword.

  - =with= declares variables that are bound in order before and around the
    loop, like in a =let*= binding.
  - =before-do= is a list of normal Lisp expressions to run before the loop executes.
  - =loop= is a list of special commands that create the loop body.  These commands
    are described in detail in the section [[#how-to-use][How to Use]].
  - =after-do= is a list of normal Lisp expressions to run after the successful
    completion of the loop.
  - =finally-do= is a list of normal Lisp expressions that always run, regardless
    of whether an early return was triggered in the loop body.
  - =finally-return= is an expression whose value is always returned, regardless
    of whether an early return was triggered in the loop body.

  The loop commands generally follow the form =(COMMAND VARIABLE-NAME &rest ARGS)=.
  For example,

  - To iterate through a [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequences-Arrays-Vectors.html][sequence]], use =(seq elem [1 2 3])= (for efficiency, there
    are also more specific commands, like =list=).
  - To collect values into a list, use =(collect my-collection collected-value)=.
  - To just bind a variable to the result of a Lisp expression, use
    =(expr my-var (my-func))=

  Below is a full example of the arguments of the =loopy= macro.  The top-level
  forms have a flexible-order, but meaning is clearest if they have the
  following order.  All of the arguments are technically optional, but having a
  loop without a body wouldn't be useful.

  #+BEGIN_SRC emacs-lisp
    ;; Returns: '((2 4 6 8 10) (1 3 5 7 9)) and prints messages.
    (loopy
     ;; Name the loop `my-loop'.
     my-loop
     ;; Create the lexically scoped variable `success-p', initialized to `nil'.
     (with (success-p nil))
     ;; Before starting the loop, print a message.
     (before-do (message "Beginning loop ..."))
     ;; Create the loop body.
     (loop (list i (number-sequence 1 10))        ; Assign `i' from 1 through 10.
           (do (message "Checking number: %d" i)) ; Report the value of `i'.
           (if (cl-evenp i)                       ; If `i' is even, add to the list
               (collect found-evens i)            ; of even numbers, otherwise add
             (collect found-odds i)))             ; to the list of odd numbers.
     ;; If the loop completes successfully, print a message and update `success-p'.
     (after-do (message "Loop completed successfully.")
               (setq success-p t))
     ;; Always report based on the value of `success-p', and message the value of
     ;; the lists of even and odd numbers.
     (finally-do (if success-p
                     (message "Confirmed success reported.")
                   (message "W: Success not confirmed!"))
                 (message "Found evens: %s" found-evens)
                 (message "Found odds: %s" found-odds))
     ;; Always return a list containing the list of even numbers and the list of odd
     ;; numbers.
     (finally-return (list found-evens found-odds)))
  #+END_SRC

  Loopy is not yet feature complete.  Here are some things that would be nice to
  add/have:
  - Add equivalent features for all that =cl-loop= can do.  Many things are
    already covered, but not everything.  See [[#translating_from_cl_loop][Translating from =cl-loop=]] for
    more.
  - De-structuring can be useful, but this can already be done using repeated
    =expr= commands.
  - Currently, code is evaluated even if it is unused.  Conditionally building
    the code that is evaluated would be more efficient, but decreases
    readability.

* How to use
  :PROPERTIES:
  :CUSTOM_ID: how-to-use
  :END:

  Macro arguments set up the lexical environment the loop runs in, Lisp code
  that runs before or after the loop, and the ultimate return value of the
  macro.  See the section [[#macro-arguments][Macro Arguments]].

  Loop commands are the main feature of the =loopy= macro.  By "command", I mean
  the expressions that make up the =loop= macro argument, such as =list= in
  =(list i '(1 2 3))=.  A command inserts code into the loop body, but can also
  perform additional setup, such as initializing specified variables or creating
  extra ones.  Many commands set up a condition for ending the loop.  See the
  section [[#loop-commands][Loop Commands]].

  The loop ends when any condition required by a loop command evaluates to
  false.  If no conditions are needed, the loop runs infinitely until a =return=
  or =leave= command is reached.  See the section [[#exiting-the-loop-early][Exiting the Loop Early]].

  Returns must be stated explicitly, either as an early return for in the loop
  body via the =return= command, or as a =finally-return= to the macro.  =nil=
  is returned by default.

** Macro Arguments
   :PROPERTIES:
   :CUSTOM_ID: macro-arguments
   :END:

   =loopy= takes at most 7 arguments.  They are all technically optional, but a
   loop that does nothing isn't very useful.

   A loop can be named by passing in an unquoted symbol as an argument.  All
   other arguments are expressions that begin with a keyword from the table
   below.

   | Keyword            | Other Names                  | Usage                                                     |
   |--------------------+------------------------------+-----------------------------------------------------------|
   | =with=             | =let*=                       | Declare variables before the loop.                        |
   | =before-do=        | =before=                     | Run Lisp expressions before loop starts.                  |
   | =loop=             | Can be excluded.             | Add expressions to loop body, performing further setup.   |
   | =after-do=         | =after=, =else=, =else-do=   | Run Lisp expressions after loop successfully completes.   |
   | =finally-do=       | =finally=                    | Always run Lisp expressions after loop exits.             |
   | =finally-return=   | =return=                     | Return a value, regardless of how the loop completes.     |

   Additionally, =(finally-return 1 2 3)= is the same as
   =(finally-return (list 1 2 3))=.

** Loop Commands
   :PROPERTIES:
   :CUSTOM_ID: loop-commands
   :END:

   Loop commands are only valid when inside the =loop= macro argument.

   These are valid:

   #+BEGIN_SRC emacs-lisp
     (loopy (loop (list i '(1 2 3))
                  (collect coll i))
            (finally-return coll))

     (loopy ((list i '(1 2 3))
             (collect coll i))
            (return coll))
   #+END_SRC

   This is not:

   #+BEGIN_SRC emacs-lisp
     (loopy (with (list i '(1 2 3)))
            (return (collect coll i)))
   #+END_SRC

   Trying to use loop commands where they don't belong will result in errors
   when the code is evaluated.

   Underneath, interpreting a command results in "instructions" that describe
   how to substitute code into the loop body and other locations.  This process
   is described in detail in [[#background-information][Background Information]].

   Some examples of instructions are:
   - Declaring a given variable in a let form to make sure it's lexically
     scoped.
   - Declaring a generated variable in a let form to contain a given value.
   - Adding a condition for continuing/exiting the loop.
   - Adding code to be run during the main loop body.
   - Adding code to be run after the main loop body.

   The implementation details of commands generally shouldn't matter, except
   that code from commands is evaluated in the order it was found.  This means
   that attempting to do something like

   #+BEGIN_SRC emacs-lisp
     (loopy (loop (collect coll (+ i 2))
                  (list i '(1 2 3)))
            (return coll))
   #+END_SRC

   won't work, as =i= is assigned a value after collecting =(+ i 2)= into
   =coll=.

   For convenience and understanding, the same command can have multiple names
   (such as =do= having the alias =progn=), and some commands can take optional
   arguments (such as =list=).

   For simplicity, the commands are described using the following notation:

   - If a command has multiple names, the names are separated by a vertical
     bar, such as in =do|progn=.
   - =VAR= is an unquoted symbol that will be used as a variable name, such
     as the =i= in =(list i my-list)=.
   - =FUNC= is a Lisp function name, such as =my-func=, =#'my-func= or
     ='my-func=.
   - =NAME= is an unquoted name of a loop (or, more accurately, of a
     =cl-block=).
   - =EXPR= is a single Lisp expression, such as =(+ 1 2)=, ='(1 2 3)=,
     =my-var=, or =(some-function my-var)=.  =EXPRS= means multiple
     expressions.
   - =CMD= is a loop command, as opposed to a normal Lisp expression.
     =(list i '(1 2 3))=, =(repeat 5)=, and =(return-from outer-loop 7)=
     are examples of loop commands.  =CMDS= means multiple commands.
   - Optional arguments are surround by brackets.  =[EXPR]= is an optional
     expression, and =[CMD]= is an optional command.  By extension,
     =[EXPRS]= is equivalent to =[EXPR [EXPR [...]]]=, and =[CMDS]= to
     =[CMD [CMD [...]]]=.

*** Commands for Generic Evaluation
    :PROPERTIES:
    :CUSTOM_ID: commands-for-generic-evaluation
    :END:

    - =(do|progn EXPRS)= :: Evaluate multiple Lisp expressions, like a
      =progn=.

      You cannot include arbitrary code in the loop body.  Trying to do so will
      result in errors, as the macro will attempt to interpret such code as a
      command.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 2 3))
                (do (message "%d" i))))
      #+END_SRC

    - =(expr|exprs|set VAR [EXPRS])= :: Bind =VAR= to each =EXPR= in order.
      Once the last =EXPR= is reached, it is used repeatedly for the rest of the
      loop.  With no =EXPR=, =VAR= is repeatedly bound to =nil=.

      *NOTE*: Loops are lexically scoped, so this is not always the same as
      =(do (setq VAR EXPR))=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((repeat 5) (expr i 1 2 3) (collect coll i))
               (return coll)) ; => '(1 2 3 3 3)

        (loopy ((repeat 5) (expr i 0 (1+ i)) (collect coll i))
               (return coll)) ; => '(0 1 2 3 4)
      #+END_SRC

*** Iteration and Looping Commands
    :PROPERTIES:
    :CUSTOM_ID: iteration-and-looping-commands
    :END:

    Iteration commands bind local variables and determine when the loop ends.
    If no command sets that condition, then the loop runs forever.

    - =(array VAR EXPR)= :: Iterate through the elements of the array =EXPR=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((array i [1 2 3])
                (do (message "%d" i))))
      #+END_SRC

    - =(array-ref|arrayf VAR EXPR)= :: Iterate through the elements of the
      array from =EXPR=, binding =VAR= to a =setf=-able place.

      #+BEGIN_SRC emacs-lisp
        (loopy (with (my-str "cat"))
               (loop (array-ref i my-str)
                     (do (setf i ?a)))
               (return my-str)) ; => "aaa"
      #+END_SRC

    - =(cons|conses VAR EXPR [FUNC])= :: Iterate through the cons cells in the
      value of =EXPR=.  Optionally, find the cons cells via =FUNC= instead of
      =cdr=.

      #+BEGIN_SRC emacs-lisp
        (loopy (loop (cons i '(1 2 3))
                     (collect coll i))
               (finally-return coll)) ; => ((1 2 3) (2 3) (3))
      #+END_SRC

    - =(list VAR EXPR [FUNC])= :: Iterate through the list =EXPR=, binding
      =VAR= to each element in the list.  Optionally, update the list by
      =FUNC= instead of =cdr=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i (number-sequence 1 10 3)) ; Inclusive, so '(1 4 7 10).
                (do (message "%d" i))))
      #+END_SRC

    - =(list-ref|listf VAR EXPR [FUNC])= :: Iterate through the list =EXPR=,
      binding =VAR= to each element in the list as a =setf=-able location.
      Optionally, update the list by =FUNC= instead of =cdr=.

      #+BEGIN_SRC emacs-lisp
        (loopy (with (my-list '(1 2 3)))
               (loop (list-ref i my-list)
                     (do (setf i 7)))
               (finally-return my-list)) ; Returns '(7 7 7).
      #+END_SRC

    - =(repeat EXPR)= :: Add a condition that the loop should stop after
      =EXPR= iterations.

      #+BEGIN_SRC emacs-lisp
        (loopy ((repeat 3)
                (do (message "Messaged three times."))))
      #+END_SRC

    - =(repeat VAR EXPR)= :: Add a condition that the loop should stop after
      =EXPR= iterations.  =VAR= starts at 0, and is incremented by 1 at the
      end of the loop.

      #+BEGIN_SRC emacs-lisp
        (loopy ((repeat i 3)
                (do (message "%d" i))))
      #+END_SRC

    - =(seq VAR EXPR)= :: Iterate through the sequence =val=, binding =var= to
      the elements of the sequence.

      #+BEGIN_SRC emacs-lisp
        (loopy ((seq i [1 2 3]) (collect coll i))
               (return coll)) ; => (1 2 3)
      #+END_SRC

    - =(seq-ref|seqf VAR EXPR)= :: Iterate through the sequence =val=, binding
      =var= to the elements of the sequence as a =setf=-able place.

      #+BEGIN_SRC emacs-lisp
        (loopy (with (my-seq '(1 2 3 4)))
               (loop (seq-ref i my-seq)
                     (do (setf i 7)))
               (return my-seq)) ; => '(7 7 7 7)
      #+END_SRC

*** Accumulation Commands
    :PROPERTIES:
    :CUSTOM_ID: accumulation-commands
    :END:

    Unlike in =cl-loop=, the presence of an accumulation command does not imply
    a return value.  You must provide a variable in which to store the
    accumulated value.  If you wish, you can then return the value of that
    variable (either early, or after the loop).

    - =(append VAR EXPR)= :: Repeatedly =append= the value of =EXPR= to =VAR=.
      =VAR= starts as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '((1 2 3) (4 5 6)))
                (append coll i))
               (return coll)) ; => '(1 2 3 4 5 6)
      #+END_SRC

    - =(collect VAR EXPR)= :: Repeatedly =append= a list containing value of
      =EXPR= to =VAR=.  =VAR= starts as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((seq i [1 2 3])
                (collect coll i))
               (finally-return coll)) ; => '(1 2 3)
      #+END_SRC

      In =cl-loop=, =collect EXPR= means to repeatedly =push= the value of
      =EXPR= into the accumulated list, and then =nreverse= that list for a
      return value.  If you specifically want this behavior, then you should use
      the =push-into= command like in its example below.

    - =(concat VAR EXPR)= :: Repeatedly =concat= the value of =EXPR= onto the
      end of =VAR=.  =VAR= starts as =nil=.  See the =vconcat= command for
      vectors.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '("a" "b" "c"))
                (concat str i))
               (return str)) ; => "abc"
      #+END_SRC

    - =(count VAR EXPR)= :: Count the number of times that =EXPR= evaluates to a
      non-nil value, adding 1 to =VAR= each time.  =VAR= starts at 0.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 nil 3 nil 5))
                (count non-nil-count i))
               (return non-nil-count)) ; => 3
      #+END_SRC

    - =(max|maximize VAR EXPR)= :: Repeatedly set =VAR= to the greater of =VAR=
      and the value of =EXPR=.  =VAR= starts at =-1.0e+INF=, so that any other
      value should be greater that it.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 11 2 10 3 9 4 8 5 7 6))
                (max my-max i))
               (return my-max)) ; => 11
      #+END_SRC

    - =(min|minimize VAR EXPR)= :: Repeatedly set =VAR= to the lesser of =VAR=
      and the value of =EXPR=.  =VAR= starts at =1.0e+INF=, so that any other
      value should be less than it.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 11 2 10 3 0 9 4 8 5 7 6))
                (min my-min i))
               (return my-min)) ; => 0
      #+END_SRC

    - =(nconc VAR EXPR)= :: Repeatedly concatenate the value of =EXPR= onto
      =VAR= with =nconc=.  Unlike =append=, =nconc= does not concatenate copies
      of the lists, but modifies =VAR= directly.

      #+BEGIN_SRC emacs-lisp
        (loopy (loop (list i '((1 2 3 4) (5 6 7 8)))
                     (nconc my-new-list i))
               (return my-new-list)) ; => '(1 2 3 4 5 6 7 8)
      #+END_SRC

    - =(push|push-into VAR EXPR)= :: Repeatedly =push= =EXPR= into =VAR=.  =VAR=
      stars as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((seq i [1 2 3])
                (push reversed i))
               (finally-return (nreverse reversed))) ; => '(1 2 3)
      #+END_SRC

    - =(sum VAR EXPR)= :: Repeatedly set =VAR= to the sum of the value of =EXPR=
      and =VAR=.  =VAR= starts at 0.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 2 3 4))
                (sum my-sum i))
               (return my-sum)) ; => 10
      #+END_SRC

    - =(vconcat VAR EXPR)= :: Repeatedly =vconcat= the value of =EXPR= onto
      =VAR=.  =VAR= starts as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '([1 2 3] [4 5 6]))
                (vconcat vector i))
               (return vector)) ; => [1 2 3 4 5 6]
      #+END_SRC

*** Control Flow
    :PROPERTIES:
    :CUSTOM_ID: control-flow
    :END:

**** Conditionals
     :PROPERTIES:
     :CUSTOM_ID: conditionals
     :END:

     Conditional commands in =loopy= can take multiple sub-commands, and work
     more like their Lisp counterparts.  There is therefore no need for an =and=
     command as used in =cl-loop=.

     - =(when EXPR CMDS)= :: Like the Lisp =when=, run =CMDS= only if =EXPR= is
       non-nil.

       #+BEGIN_SRC emacs-lisp
         ;; Get only the inner lists with all even numbers.
         ;; => '((2 4 6) (8 10 12) (16 18 20))
         (loopy ((list i '((2 4 6) (8 10 12) (13 14 15) (16 18 20)))
                 (when (loopy ((list j i)
                               (when (cl-oddp j)
                                 (return nil)))
                              (else-do (cl-return t)))
                   (collect only-evens i)))
                (finally-return only-evens))
       #+END_SRC

     - =(if EXPR CMDS)= :: Like the Lisp =if=, run the first command if =EXPR=
       is non-nil.  Otherwise, run the remaining commands.

       #+BEGIN_SRC emacs-lisp
         ;; => '((7 5 3 1) (6 4 2) (3 3 3))
         (loopy ((seq i [1 2 3 4 5 6 7])
                 (if (cl-oddp i)
                     (push-into reversed-odds i)
                   (push-into reversed-evens i)
                   (push-into some-threes 3)))
                (finally-return (list reversed-odds
                                      reversed-evens
                                      some-threes)))
       #+END_SRC

     - =(cond [(EXPR CMDS) [...]])= :: Like the Lisp =cond=, for the first
       =EXPR= to evaluate to non-nil, run the following commands =CMDS=.

       #+BEGIN_SRC emacs-lisp
         (loopy ((list i '(1 2 3 "cat" 4 5 6 "dog"))
                 (cond
                  ((not (numberp i)) (collect not-numbers i))
                  ((cl-evenp i)      (collect evens i))
                  (t                 (collect odds i))))
                (return evens odds not-numbers)) ; => '((2 4 6) (1 3 5) ("cat" "dog"))
       #+END_SRC

**** Skipping an Iteration
     :PROPERTIES:
     :CUSTOM_ID: skipping-an-iteration
     :END:

     - =(skip|continue)= :: Go to next loop iteration.

       #+BEGIN_SRC emacs-lisp
         (loopy ((seq i (number-sequence 1 20))
                 (when (zerop (mod i 10)) (skip))
                 (when (cl-evenp i)       (push-into my-collection i)))
                (finally-return (nreverse my-collection))) ; => (2 4 6 8 12 14 16 18)
       #+END_SRC

**** Exiting the Loop Early
     :PROPERTIES:
     :CUSTOM_ID: exiting-the-loop-early
     :END:

     The loop is contained in a =cl-block=, and these forms are all variations
     of =cl-return-from= underneath.  In fact, you could use =(do
     (cl-return-from NAME VAL))= to achieve the same effect.  These forms are
     provided for convenience.

     - =(return EXPR)= :: Leave the current loop, returning value.

       #+BEGIN_SRC emacs-lisp
         (loopy (with  (j 0))
                ((do (cl-incf j))
                 (when (> j 5)
                   (return j))))
       #+END_SRC

     - =(return-from NAME EXPR)= :: Leave the loop =NAME=, returning =VAL=.

       #+BEGIN_SRC emacs-lisp
         (loopy outer-loop
                ((list inner-list '((1 2 3) (1 bad-val? 1) (4 5 6)))
                 (do (loopy ((list i inner-list)
                             (when (eq i 'bad-val?)
                               (return-from outer-loop 'bad-val?)))))))
       #+END_SRC

     - =(leave|break)= :: Leave the loop.  Return =nil=.

       #+BEGIN_SRC emacs-lisp
         (loopy ((list i '(1 2 3 "cat" 4 5 6))
                 (if (numberp i)
                     (do (message "Number: %d" i))
                   (leave))))
       #+END_SRC

     - =(leave-from|break-from NAME)= :: Leave the loop =NAME=.  Return =nil=.

       #+BEGIN_SRC emacs-lisp
         (loopy outer
                (with (failure-condition 'fail)
                      (failed-p nil))
                ((list i '((1 2 3) (4 5 6) (7 fail 8)))
                 (do (loopy ((list j i)
                             (when (eq j failure-condition)
                               ;; Note: Can't do (expr failed-p t), since
                               ;;       `expr' is local to its own loop.
                               (do (setq failed-p t))
                               (break-from outer))))))
                (finally-do (if failed-p
                                (message "Failed!")
                              (message "Success!"))))
       #+END_SRC

* Adding Custom Commands
  :PROPERTIES:
  :CUSTOM_ID: adding-custom-commands
  :END:

** Background Information
   :PROPERTIES:
   :CUSTOM_ID: background-information
   :END:

   The core working of =loopy= is taking a command and generating code that is
   substituted into a loop body.

   For example, the parsing the command =(list i '(1 2 3))= produces the
   following instructions.  Some commands require the creation of unique
   temporary variables, such as =g3019= in the below output.

   #+BEGIN_SRC emacs-lisp
     ((loopy--implicit-vars g3019 '(1 2 3))
      (loopy--explicit-vars i nil)
      (loopy--pre-conditions consp g3019)
      (loopy--main-body setq i (car g3019))
      (loopy--latter-body setq g3019 (cdr g3019)))
   #+END_SRC

   The ~car~ of an instruction is the place to put code and the ~cdr~ of the
   instruction is said code to put.  You can see that not all of the code to be
   inserted is a valid Lisp form.  Some of it is inserted into variable lists
   like in ~let~ and ~let*~ instead of being treated as an expression.

   | Place                     | Code                         |
   |---------------------------+------------------------------|
   | =loopy--implicit-vars=    | =(g3019 '(1 2 3))=           |
   | =loopy--explicit-vars=    | =(i nil)=                    |
   | =loopy--pre-conditions=   | =(consp g3019)=              |
   | =loopy--main-body=        | =(setq i (car g3019))=       |
   | =loopy--latter-body=      | =(setq g3019 (cdr g3019))=   |

   Commands are parsed by =loopy--parse-body-forms=, which receives a list of
   commands and returns a list of instructions.  For commands that take
   sub-commands as arguments (such as =cond=, =if=, and =when=), more specific
   parsing functions are called in a mutually recursive fashion (e.g.,
   Function-1 uses Function-2 which uses Function-1, and so on).

   For example, consider the function =loopy--parse-conditional-forms=, which
   parses the =if=, =when=, and =unless= commands.  It needs to be able to group
   any code going to the loop body under its respective conditional control
   structure and condition.  To do this, it uses =loopy--parse-body-forms= to
   turn its sub-commands into a list of instructions, and then checks the =car=
   of each instruction.

   #+BEGIN_SRC emacs-lisp
     (defun loopy--parse-conditional-forms (wrapper condition forms &optional loop-name)
       "Parse FORMS, wrapping `loopy--main-body' expressions in a conditional form.
     The instructions (e.g., return expressions) are wrapped with a
     WRAPPER with CONDITION.  Optionally needs LOOP-NAME for block
     returns."
       (let ((full-instructions)
             (sub-instructions (loopy--parse-body-forms forms loop-name))
             (conditional-body))
         (dolist (instruction sub-instructions)
           (cl-case (car instruction)
             (loopy--main-body (push (cdr instruction) conditional-body))
             (t                (push instruction full-instructions))))
         (push `(loopy--main-body . (,wrapper ,condition ,@conditional-body))
               full-instructions)
         full-instructions))
   #+END_SRC

   The hardest part of this exchange is making sure the inserted code ends up in
   the correct order.

   A loop body command has 7 main places to put code.  Here is a quick
   description of each and an example taken mainly from parsing the =list=
   command.

   - =loopy--explicit-generalized-vars= :: Lists of a symbol and a macro
     expansion that will be given to =cl-symbol-macrolet=.  This is used for
     =setf=-able variables.

   - =loopy--implicit-vars= :: Lists of a symbol and an expression that will
     be given to =let=.  This is used for creating variables that are not
     named by must exists, such as for holding ='(1 2 3)= in
     =(list i '(1 2 3))=.

   - =loopy--explicit-vars= :: Lists of a symbol and an expression that will
     be given to =let=.  This is needed to ensure that named variables in
     commands are lexically scoped, such as the =i= in =(list i '(1 2 3))=.

   - =loopy--pre-conditions= :: Expressions that determine if the =while=
     loop runs/continues, such as whether a list still has elements in it.
     If there is more than one expression, than all expressions are used in
     an =and= special form.

   - =loopy--main-body= :: Expressions that make up the main body of the
     loop.

   - =loopy--latter-body= :: Expressions that need to be run after the main
     body, such as updating implicit variables.

   - =loopy--post-conditions= :: Expressions that determine whether the
     =while= loop continues, but checked after the loop body has run.  The
     code from this is ultimately appended to the latter body before being
     substituted in.

   There are 5 more variables a loop command can push to, but they are derived
   from the macro's arguments.  Adding to them after using a macro argument
   might lead to unintended behavior.  You might wish to use them if, for
   example, you are concerned with what happens after the loop exits/completes.

   - =loopy--with-vars= :: Lists of a symbol and an expression that will be
     given to =let*=.  These are derived from the =with= macro argument.

   - =loopy--before-do= :: Expressions to evaluate before the loop.  These are
     derived from the =before-do= macro argument.

   - =loopy--after-do= :: Expressions to evaluate after the loop completes
     successfully.  These are derived from the =after-do= macro argument.

   - =loopy--final-do= :: Expressions to evaluate after the loop completes,
     regardless of success.  These are derived from the =finally-do= macro
     argument.

   - =loopy--final-return= :: An expression that is always returned by the
     macro, regardless of any early returns in the loop body.  This is
     derived from the =finally-return= macro argument.

   These variables will be substituted into the following list of code, which is
   returned by the =loopy= macro for evaluation.

   #+BEGIN_SRC emacs-lisp
     `(cl-symbol-macrolet (,@(or loopy--explicit-generalized-vars
                                 (list (list (gensym) nil))))
        (let* (,@(or loopy--with-vars '((_))))
          (let (,@(or (append loopy--implicit-vars loopy--explicit-vars)
                      '((_))))
            (let ((loopy--early-return-capture
                   (cl-block ,loopy--name-arg
                     ,@loopy--before-do
                     (while ,(cl-case (length loopy--pre-conditions)
                               (0 t)
                               (1 (car loopy--pre-conditions))
                               (t (cons 'and loopy--pre-conditions)))
                       (cl-tagbody
                        ,@loopy--main-body
                        loopy--continue-tag
                        ,@loopy--latter-body))
                     ,@loopy--after-do
                     nil)))
              ,@loopy--final-do
              ,(if loopy--final-return
                   loopy--final-return
                 'loopy--early-return-capture)))))
   #+END_SRC

** A Small Example
   :PROPERTIES:
   :CUSTOM_ID: a-small-example
   :END:

   To implement a custom loop body command, =loopy= needs two pieces of
   information:
   1. The keyword that names your command
   2. The parsing function that can turn uses of your command into instructions.

   Importantly, your custom commands cannot share a name.

   For example, say that you're tired of typing out
   =(do (message "Hello, %s" first last))= and would prefer to instead use
   =(greet FIRST [LAST])=.  This only requires pushing code into the main
   loopy body, so the definition of the parsing function is quite simple.

   #+BEGIN_SRC emacs-lisp
     (cl-defun my-loopy-greet-command-parser ((_ first &optional last))
       "Greet one with first name FIRST and optional last name LAST."
       `((loopy--main-body . (if ,last
                                 (message "Hello, %s %s" ,first ,last)
                               (message "Hello, %s" ,first)))))
   #+END_SRC

   =loopy= will pass the entire command expression to the parsing function, and
   expects back a list of instructions.

   To tell =loopy= about this function, add it and the command name =greet= to
   =loopy-custom-command-parsers=.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'loopy-custom-command-parsers
                  '(greet . my-loopy-greet-command-parser))
   #+END_SRC

   After that, you can use your custom command in the loop body.

   #+BEGIN_SRC emacs-lisp
     (loopy ((list name '(("John" "Deer") ("Jane" "Doe") ("Jimmy")))
             (greet (car name) (cadr name))))
   #+END_SRC

   By running =M-x pp-macroexpand-last-sexp= on the above expression, you can
   see that it expands to do what we want, as expected.

   #+BEGIN_SRC emacs-lisp
     (cl-symbol-macrolet ((g3314 nil))
       (let* ((_))
         (let ((g3313 '(("John" "Deer") ("Jane" "Doe") ("Jimmy")))
               (name nil))
           (let ((loopy--early-return-capture
                  (cl-block nil
                    (while (consp g3313)
                      (cl-tagbody
                       (setq name (car g3313))
                       (if (cadr name)
                           (message "Hello, %s %s" (car name) (cadr name))
                         (message "Hello, %s" (car name)))
                       loopy--continue-tag
                       (setq g3313 (cdr g3313))))
                    nil)))
             loopy--early-return-capture))))
   #+END_SRC

** A Slightly More Complicated Example
   :PROPERTIES:
   :CUSTOM_ID: a-slightly-more-complicated-example
   :END:

   Lets say we want to emulate =cl-loop='s =always= clause, which causes the
   loop to return =nil= if an expression evaluates to =nil= and =t= otherwise.

   Here is an example:

   #+BEGIN_SRC emacs-lisp
     (cl-loop for i in (number-sequence 1 9) always (< i 10)) ; => t
   #+END_SRC

   Without custom commands, you could write the following in =loopy=.

   #+BEGIN_SRC emacs-lisp
     (loopy ((list i (number-sequence 1 9))
             (unless (< i 10) (return nil)))
            (after-do (cl-return t)))
   #+END_SRC

   This general approach is certainly wordier.  Tere's how you could do it with
   a custom command:

   #+BEGIN_SRC emacs-lisp
     (cl-defun my--loopy-always-command-parser ((_ &rest conditions))
       "Parse a command of the form `(always cond1 cond2)'.
     If any condition is `nil', `loopy' should immediately return `t'"
       (let (instructions)
         (push `(loopy--after-do . (cl-return t)) instructions)
         (dolist (condition conditions)
           (push `(loopy--post-conditions . ,condition) instructions))
         instructions))

     (add-to-list 'loopy-custom-command-parsers
                  (cons 'always #'my--loopy-always-command-parser))


     (loopy ((list i (number-sequence 1 9)) (always (< i 10)))) ; => t

     (loopy ((list i (number-sequence 1 9))
             (list j '(2 4 6 8 9))
             (always (< i 10) (cl-evenp j)))) ; => nil
   #+END_SRC

   It's still slightly more typing, but not by much.  I take this to mean that
   =loopy= is better for more complicated loops rather than smaller ones.

* How does it compare to =cl-loop=?
  :PROPERTIES:
  :CUSTOM_ID: how-does-it-compare-to-other-approaches
  :END:

  =loopy= should be comparable with =cl-loop= for most things, keeping in
  mind the following:
  - It is probably less efficient than =cl-loop=, though I am so far trying to
    keep the same logic that =cl-loop= uses.
  - It has more flexible control-flow commands, under which you can easily group
    sub-commands, including assignments.
  - Using an accumulation command does not imply a return value.
  - It has a =skip= command to skip to skip the rest of the loop body and
    immediately start the next iteration.  Of course, a similar effect could be
    achieved using the =when= or =unless= commands.

  =loopy= is not always one-to-one replacement for =cl-loop=, but it is easy to
  use and extend, and performs well in the cases that it already handles.

  Below is a simple example of =loopy= vs =cl-loop=.

  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)
    (cl-loop with some-thing = 5
             for i from 1 to 100
             do (message "I is %s" i)
             when (> (+ i 5) 20)
             return (format "Done: %d" i))

    (require 'loopy)
    (loopy (with (some-thing 5))
           ((list i (number-sequence 1 100))
            (do (message "I is %s" i))
            (when (> (+ i 5) 20)
              (return (format "Done: %d" i)))))
  #+END_SRC

  The main benefit (I believe) of Loopy is clearer grouping of constructs under
  conditionals while still using a clean syntax, such as in the below example.

  #+BEGIN_SRC emacs-lisp
    (loopy ((list i (number-sequence 1 20))
            (when (cl-evenp i)
              (expr once i)
              (expr twice (* 2 i))
              (push-into together (cons once twice))))
           (finally-return (nreverse together)))
  #+END_SRC

  In my experience, =cl-loop= does not allow the easy grouping of assignment
  statements under a =when= condition.  For example, below is something I would
  like to try to do with =cl-loop=.

  I am aware that in this example the =for= statements aren't necessary and that
  the =collect= statements would be sufficient, but (when I come across things
  like this in my work) I would like to use them to declare variables for
  readability purposes.

  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)
    (save-match-data
      (cl-loop with pattern = "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)"
               for line in (split-string "Line1-Data1\nBad\nLine2-Data2")
               when (string-match pattern line)
               for line-num = (concat "L" (match-string 1 line))
               and for data-nums = (concat "D" (match-string 2 line))

               ;; … Further processing now that data is named …

               and collect (match-string 1 line) into line-nums
               and collect (match-string 2 line) into data-nums
               finally return (list line-nums data-nums)))

    ;; Normal Elisp:
    (save-match-data
      (let ((pattern "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)")
            (line-nums)
            (data-nums))
        (dolist (line (split-string "Line1-Data1\nBad\nLine2-Data2"))
          (when (string-match pattern line)
            (let ((line-num (concat "L" (match-string 1 line)))
                  (datum-num (concat "D" (match-string 2 line))))

              ;; … Further processing now that data is named …

              (push line-num line-nums)
              (push datum-num data-nums))))
        (list (nreverse line-nums) (nreverse data-nums))))
  #+END_SRC

  Here is how one could currently do it with =loopy=:

  #+BEGIN_SRC emacs-lisp
    (require 'loopy)
    (save-match-data
      (loopy (with (pattern "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)"))
             ((list line (split-string "Line1-Data1\nBad\nLine2-Data2"))
              (when (string-match pattern line)
                (expr line-num (concat "L" (match-string 1 line)))
                (expr datum-num (concat "D" (match-string 2 line)))

                ;; … Further processing now that data is named …

                (collect line-nums line-num)
                (collect data-nums datum-num)))
             (finally-return line-nums data-nums)))
  #+END_SRC

  I believe that the value of the macro increases for longer loop bodies with
  several conditional commands.

  Another nice ability, one that I'm not sure =cl-loop= has, is
  skipping/continuing a loop iteration.

  #+BEGIN_SRC emacs-lisp
    ;; Returns even numbers that aren't multiples of 10.
    (loopy ((list i (number-sequence 1 20))
            (when (zerop (mod i 10))
              (skip))
            (when (cl-evenp i)
              (push-into my-collection i)))
           (finally-return (nreverse my-collection))) ; => (2 4 6 8 12 14 16 18)
  #+END_SRC

** Translating from =cl-loop=
   :PROPERTIES:
   :CUSTOM_ID: translating-from-cl-loop
   :END:

*** For Clauses
    :PROPERTIES:
    :CUSTOM_ID: for-clauses
    :END:

    As Emacs has many functions that return lists, I decided to not implement an
    exact equivalent for every for-clause that =cl-loop= has.  Instead, one can
    just iterate through the return value of the appropriate function using the
    =list= command.

    | =cl-loop=                                       | =loopy=                                            |
    |-------------------------------------------------+----------------------------------------------------|
    | =for VAR from EXPR1 to EXPR2 by EXPR3=          | =(list VAR (number-sequence EXPR1 EXPR2 EXPR3))=   |
    | =for VAR in LIST [by FUNCTION]=                 | =(list VAR LIST [FUNC])=                           |
    | =for VAR on LIST [by FUNCTION]=                 | =(cons VAR VAL [FUNC])=                            |
    | =for VAR in-ref LIST by FUNCTION=               | =(list-ref VAR LIST [FUNC])=                       |
    | =for VAR across ARRAY=                          | =(array VAR ARRAY)=                                |
    | =for VAR across-ref ARRAY=                      | =(array-ref VAR ARRAY)=                            |
    | =for VAR being the elements of SEQUENCE=        | =(seq VAR SEQUENCE)=                               |
    | =for VAR being the elements of-ref SEQUENCE=    | =(seq-ref VAR SEQUENCE)=                           |
    | =for VAR being the symbols [of OBARRAY]=        | None so far.                                       |
    | =for VAR being the hash-keys of HASH-TABLE=     | =(list VAR (hash-table-keys HASH-TABLE))=          |
    | =for VAR being the hash-values of HASH-TABLE=   | =(list VAR (hash-table-values HASH-TABLE))=        |
    | =for VAR being the key-codes of KEYMAP=         | None so far.                                       |
    | =for VAR being the key-bindings of KEYMAP=      | None so far.                                       |
    | =for VAR being the key-seqs of KEYMAP=          | None so far.                                       |
    | =for VAR being the overlays [of BUFFER]=        | None so far.                                       |
    | =for VAR being the intervals [of BUFFER]=       | None so far.                                       |
    | =for VAR being the frames=                      | =(list VAR (frame-list))=                          |
    | =for VAR being the windows [of FRAME]=          | =(list VAR (window-list FRAME))=                   |
    | =for VAR being the buffers=                     | =(list VAR (buffer-list))=                         |
    | =for VAR = EXPR1 then EXPR2=                    | =(expr VAR EXPR1 EXPR2)=                           |

*** Iteration Clauses
    :PROPERTIES:
    :CUSTOM_ID: iteration-clauses
    :END:

    | =cl-loop=          | =loopy=                 |
    |--------------------+-------------------------|
    | ~repeat INT~       | ~(repeat INT)~          |
    | ~while COND~       | ~(unless COND (leave))~ |
    | ~until COND~       | ~(when COND (leave))~   |
    | ~iter-by iterator~ | None so far.            |

    The clauses =always=, =never=, =thereis= can be replaced with a combination
    of =loopy='s loop commands and macro arguments.  Below is an example from the
    CL Lib manual.

    #+BEGIN_SRC emacs-lisp
      ;; With `cl-loop':
      (if (cl-loop for size in size-list always (> size 10))
          (only-big-sizes)
        (some-small-sizes))

      ;; With `loopy`:
      ;; Depends on whether the functions have a return value.
      (loopy ((list size size-list)
              ;; `return` is just a wrapper for `cl-return`.
              (when (< size 10) (return (some-small-sizes))))
             ;; Only runs if loop doesn't exit early.
             (after-do (cl-return (only-big-sizes))))
    #+END_SRC

    A seen in the above example, =loopy= does not always have a one-to-one
    translation to =cl-loop= ([[#a-slightly-more-complicated-example][though you
    could try a custom command]]).

    It is not an explicit goal to be able to replace all uses of =cl-loop= with
    =loopy=.  T'd prefer that =loopy= be useful in places where =cl-loop= might
    not be enough, instead of forcing =loopy= into places that =cl-loop= already
    works well.

    Other options in the above example include =cl-every= and =seq-every-p=.

*** Accumulation Clauses
    :PROPERTIES:
    :CUSTOM_ID: accumulation-clauses
    :END:

    *NOTE*: In =loopy=, accumulation commands do not imply a return value.  You
    cannot simply do =(collect FORM)=; you must always give a variable into which
    to accumulate the form.

    | =cl-loop=                | =loopy=              |
    |--------------------------+----------------------|
    | =append FORM into VAR=   | =(append VAR FORM)=  |
    | =collect FORM into VAR=  | =(collect VAR FORM)= |
    | =concat FORM into VAR=   | =(concat VAR FORM)=  |
    | =count FORM into VAR=    | =(count VAR FORM)=   |
    | =maximize FORM into VAR= | =(max VAR FORM)=     |
    | =minimize FORM into VAR= | =(min VAR FORM)=     |
    | =nconc FORM into VAR=    | =(nconc VAR FORM)=   |
    | =sum FORM into VAR=      | =(sum VAR FORM)=     |
    | =vconcat FORM into VAR=  | =(vconcat VAR FORM)= |

*** Other Clauses
    :PROPERTIES:
    :CUSTOM_ID: other-clauses
    :END:

    In =loopy=, =if=, =when=, and =unless= can take multiple loop commands as
    arguments, and operate more like their Lisp counterparts.

    This means that =if= is not a synonym for =when=.  Tust like the normal Lisp
    special form =if=, =(if COND cmd1 cmd2 cmd3)= only runs =cmd1= if =COND=
    evaluates to non-nil, and only runs commands =cmd2= and =cmd3= if =COND=
    evaluates to =nil=.

    =loopy= also provides the command =cond=, which works like the normal Lisp
    special form =cond=.

    | =cl-loop=              | =loopy=                                     |
    |------------------------+---------------------------------------------|
    | =with var = value=     | =(with (VAR VALUE))= as a macro argument    |
    | =if COND clause=       | =(if COND CMDS)= as a loop command          |
    | =when COND clause=     | =(when COND CMDS)= as a loop command        |
    | =unless COND clause=   | =(unless COND CMDS)= as a loop command      |
    | =named NAME=           | =NAME= as a macro argument                  |
    | =initially [do] EXPRS= | =(before-do EXPRS)= as a macro argument     |
    | =finally [do] EXPRS=   | =(finally-do EXPRS)= as a macro argument    |
    | =finally return EXPR=  | =(finally-return EXPR)= as a macro argument |
    | =do EXPR=              | =(do EXPRS)= as a loop command              |
    | =return EXPR=          | =(return EXPR)= as a loop command           |

    # flycheck-disabled-checkers: (proselint)
*  Real-World Examples

  #+begin_quote
  This section contains examples of loops that exist in real-world commands.
  To these loops in context, full examples of those commands can be found in
  the file [[file:examples.el]].
  #+end_quote

  One command that could see a benefit from using =loopy= is =selectrum-swiper=
  from the [[https://github.com/raxod502/selectrum/wiki/Useful-Commands#swiper-like-jumping-to-matching-lines][Selectrum wiki]].  This command allows a user to jump to a matched
  line in the buffer.  Candidates are created by looping through text lines,
  formatting non-empty lines and collecting the formatted lines into a list of
  candidates.  At the same time, it selects a default candidate by finding the
  non-empty line closest to the current line.

  Here is the main portion of the command, which uses =cl-loop=.

  #+begin_src emacs-lisp
    ;; ...
    (cl-loop with minimum-line-number = (line-number-at-pos (point-min) t)
             with buffer-text-lines = (split-string (buffer-string) "\n")
             with number-format = (concat
                                   "L%0"
                                   (number-to-string
                                    (length (number-to-string
                                             (length buffer-text-lines))))
                                   "d: ")

             with closest-candidate = nil
             with distance-to-current-line = nil
             with smallest-distance-to-current-line = most-positive-fixnum

             with formatted-line = nil
             with formatted-lines = nil

             for txt in buffer-text-lines
             for num = minimum-line-number then (1+ num)
             unless (string-empty-p txt) ; Just skip empty lines.
             do
             (setq formatted-line (propertize
                                   txt
                                   'selectrum-candidate-display-prefix
                                   (propertize
                                    (format number-format num)
                                    'face 'completions-annotations)
                                   'line-num num)
                   distance-to-current-line (abs (- current-line-number num)))
             (push formatted-line formatted-lines)
             (when (< distance-to-current-line
                      smallest-distance-to-current-line)
               (setq smallest-distance-to-current-line distance-to-current-line
                     closest-candidate formatted-line))
             finally return (cons closest-candidate
                                  (nreverse formatted-lines)))
    ;; ...
  #+end_src

  Here is how it could be done with =loopy=.  The logic in the original is a
  bit different, but this is still a good demonstation of the value of grouping
  loop commands under conditionals.  Because =cl-loop= doesn’t have an
  equivalent feature, one needs to declare more variables with the =with=
  keyword and rely on Lisp expressions for processing instead of clauses.

  #+begin_src emacs-lisp
    ;; ...
    (loopy (with (buffer-text-lines (split-string (buffer-string) "\n"))
                 (number-format
                  (concat "L%0"
                          (number-to-string
                           (length (number-to-string
                                    (length buffer-text-lines))))
                          "d: ")))
           (loop (list line-text buffer-text-lines)
                 (expr line-num (line-number-at-pos (point-min) t) (1+ line-num))
                 (unless (string-empty-p line-text)
                   (push-into formatted-lines
                              (propertize line-text
                                          'selectrum-candidate-display-prefix
                                          (propertize
                                           (format number-format line-num)
                                           'face 'completions-annotations)
                                          'line-num line-num))
                   ;; There are a few different ways that you could express this.
                   (when (null default-cand)
                     (expr prev-dist +1.0e+INF dist-to-default-cand)
                     (expr dist-to-default-cand (abs (- current-line-number
                                                        line-num)))
                     (when (> dist-to-default-cand prev-dist)
                       (expr default-cand (cadr formatted-lines))))))
           ;; Could also use `cl-multiple-value-bind' and `finally-return',
           ;; which has the benefit of not being captured by the loop's
           ;; `let'-forms.
           (finally-do (setq default-candidate default-cand
                             formatted-candidates (nreverse formatted-lines))))
    ;; ...
  #+end_src


  Another command to compare against is =selectrum-outline=, from the same page.
  This command is a bit more complicated than =selectrum-swiper=, but the logic
  is very similar.  The code loops through each line in the buffer, ignoring
  empty lines.  For each non-empty line found that matches a pre-determined
  regular expression (which describes a one-line heading), a history of parent
  headings are prepended to the string, which is collected into a list of
  formatted candidates.  At the same time, the loop find the current heading,
  which is assumed to be the closest heading before the current line.

  Beause of the stated limitation with grouping under conditionals, I found this
  easier to write in normal ELisp.  Since I just want to compare structure, I’ve
  removed the comments.  You can find a commented version on Selectrum’s wiki.

  #+begin_src emacs-lisp
    ;; ...
    (let ((selectrum-should-sort-p nil)
          (buffer-lines (split-string (buffer-string) "\n"))
          (line-number 0)
          (line-number-format)
          (default-heading)
          (current-line-number (line-number-at-pos (point)))
          (backwards-prefix-list)
          (prev-heading-text)
          (prev-heading-level)
          (formatted-headings))

      (setq line-number-format
            (concat "L%0"
                    (number-to-string
                     (length (number-to-string (length buffer-lines))))
                    "d: "))

      (save-match-data
        (dolist (text-line buffer-lines)
          (cl-incf line-number)
          (when (string-match heading-regexp text-line)
            (let ((heading-text (match-string-no-properties 2 text-line))
                  (heading-level
                   (length (match-string-no-properties 1 text-line)))
                  (formatted-heading))

              (when (null prev-heading-level)
                (setq prev-heading-level heading-level))

              (cond ((> heading-level prev-heading-level)
                     (setq backwards-prefix-list (cons prev-heading-text
                                                       backwards-prefix-list)
                           prev-heading-level heading-level))
                    ((< heading-level prev-heading-level)
                     (setq backwards-prefix-list (last backwards-prefix-list
                                                       heading-level)
                           prev-heading-level heading-level)))

              (setq prev-heading-text heading-text)

              (when (and (null default-heading)
                         (> line-number current-line-number))
                (setq default-heading (car formatted-headings)))

              (push (propertize
                     (concat (string-join (reverse backwards-prefix-list) "/")
                             (and backwards-prefix-list "/")
                             heading-text)
                     'line-number line-number
                     'selectrum-candidate-display-prefix
                     (propertize
                      (format line-number-format line-number)
                      'face 'completions-annotations))
                    formatted-headings)))))
      ;; ...
      )
  #+end_src

  Here is a version in =loopy=.

  #+begin_src emacs-lisp
    ;; ...
    (let (selectrum-should-sort-p
          (current-line-number (line-number-at-pos (point) t)))
      (save-match-data
        (cl-multiple-value-bind (default-candidate formatted-candidates)
            (loopy
             (with (buffer-lines (split-string (buffer-string) "\n"))
                   (line-number-format
                    (concat "L%0"
                            (number-to-string
                             (length (number-to-string (length buffer-lines))))
                            "d: ")))
             (loop (expr line-number 1 (1+ line-number))
                   (list text-line buffer-lines)
                   (when (string-match heading-regexp text-line)
                     (expr heading-text
                           (match-string-no-properties 2 text-line))
                     (expr heading-level
                           (length (match-string-no-properties 1 text-line)))

                     (cond ((> heading-level (or prev-heading-level
                                                 heading-level))
                            (push-into backwards-prefix-list prev-heading-text))
                           ((< heading-level (or prev-heading-level
                                                 heading-level))
                            (expr backwards-prefix-list
                                  (last backwards-prefix-list heading-level))))

                     (expr prev-heading-text heading-text)
                     (expr prev-heading-level heading-level)

                     (when (and (null default-heading)
                                (> (- line-number current-line-number) 0))
                       (expr default-heading (car formatted-headings)))

                     (push-into
                      formatted-headings
                      (propertize
                       (concat (string-join (reverse backwards-prefix-list) "/")
                               (and backwards-prefix-list "/")
                               heading-text)
                       'line-number line-number
                       'selectrum-candidate-display-prefix
                       (propertize (format line-number-format line-number)
                                   'face 'completions-annotations)))))
             (finally-return default-heading (nreverse formatted-headings)))
          ;; ...
          )))
  #+end_src

  In my opinion, the =loopy= version is a bit cleaner.  If one we’re writing
  code like this often (say, in a library), then the loop body could be
  simplified even further with [[#adding-custom-commands][custom commands]].

  # Local Variables:
  # End:
