#+title: Loopy: A Looping and Iteration Macro
#+author: Earl Hyatt
#+export_file_name: loopy

# Make sure to export all headings as such.  Otherwise, some links to
# sub-headings won’t work.
#+options: H:6
# Some parsers require this option to export footnotes.
#+options: f:t

# Texinfo settings.  We’ll just generate an Info document from this README.
#+TEXINFO_FILENAME: loopy.info
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Loopy: (loopy)
#+TEXINFO_DIR_DESC: A looping and iteration macro.

=loopy= is a macro meant for iterating and looping.  It is similar in usage to
=cl-loop= [fn:cl-loop] but uses symbolic expressions rather than keywords.

=loopy= should be complementary to the features provided by the Seq [fn:seq] and
CL [fn:cl-lib] libraries (including =cl-loop=) and Emacs's regular looping and
mapping features.
-----

# This auto-generated by toc-org.
* Table of Contents                                                :TOC:noexport:
- [[#introduction][Introduction]]
- [[#how-to-use][How to use]]
  - [[#macro-arguments][Macro Arguments]]
  - [[#loop-commands][Loop Commands]]
    - [[#commands-for-generic-evaluation][Commands for Generic Evaluation]]
    - [[#iteration-and-looping-commands][Iteration and Looping Commands]]
    - [[#accumulation-commands][Accumulation Commands]]
    - [[#control-flow][Control Flow]]
      - [[#conditionals][Conditionals]]
      - [[#skipping-an-iteration][Skipping an Iteration]]
      - [[#exiting-the-loop-early][Exiting the Loop Early]]
- [[#adding-custom-commands][Adding Custom Commands]]
  - [[#background-information][Background Information]]
  - [[#a-small-example][A Small Example]]
  - [[#a-slightly-more-complicated-example][A Slightly More Complicated Example]]
- [[#how-does-it-compare-to-cl-loop][How does it compare to =cl-loop=?]]
  - [[#translating-from-cl-loop][Translating from =cl-loop=]]
    - [[#for-clauses][For Clauses]]
    - [[#iteration-clauses][Iteration Clauses]]
    - [[#accumulation-clauses][Accumulation Clauses]]
    - [[#other-clauses][Other Clauses]]
-  [[#real-world-examples][Real-World Examples]]
- [[#keyword-and-command-index][Keyword and Command Index]]
- [[#variable-index][Variable Index]]
- [[#concept-index][Concept Index]]
- [[#footnotes][Footnotes]]

* Introduction

  The =loopy= macro has several possible arguments, each beginning with a
  keyword.

  - =with= declares variables that are bound in order before and around the
    loop, like in a =let*= binding.
  - =before-do= is a list of normal Lisp expressions to run before the loop
    executes.
  - =loop= is a list of special commands that create the loop body.  These
    commands are described in detail in the section [[#loop-commands][Loop Commands]].
  - =after-do= is a list of normal Lisp expressions to run after the successful
    completion of the loop.
  - =finally-do= is a list of normal Lisp expressions that always run,
    regardless of whether an early return was triggered in the loop body.
  - =finally-return= is an expression whose value is always returned, regardless
    of whether an early return was triggered in the loop body.

  The loop commands generally follow the form =(COMMAND VARIABLE-NAME &rest ARGS)=.
  For example,

  - To iterate through a sequence [fn:sequence], use =(seq elem [1 2 3])= (for
    efficiency, there are also more specific commands, like =list=).
  - To collect values into a list, use =(collect my-collection collected-value)=.
  - To just bind a variable to the result of a Lisp expression, use
    =(expr my-var (my-func))=

  Below is a full example of the arguments of the =loopy= macro.  The top-level
  forms have a flexible-order, but meaning is clearest if they have the
  following order.  All of the arguments are technically optional, but having a
  loop without a body wouldn't be useful.

  #+BEGIN_SRC emacs-lisp
    ;; Returns: '((2 4 6 8 10) (1 3 5 7 9)) and prints messages.
    (loopy
     ;; Name the loop `my-loop'.
     my-loop
     ;; Create the locally scoped variable `success-p', initialized to `nil'.
     (with (success-p nil))
     ;; Before starting the loop, print a message.
     (before-do (message "Beginning loop ..."))
     ;; Create the loop body.
     (loop (list i (number-sequence 1 10))        ; Assign `i' from 1 through 10.
           (do (message "Checking number: %d" i)) ; Report the value of `i'.
           (if (cl-evenp i)                       ; If `i' is even, add to the list
               (collect found-evens i)            ; of even numbers, otherwise add
             (collect found-odds i)))             ; to the list of odd numbers.
     ;; If the loop completes successfully, print a message and update `success-p'.
     (after-do (message "Loop completed successfully.")
               (setq success-p t))
     ;; Always report based on the value of `success-p', and message the value of
     ;; the lists of even and odd numbers.
     (finally-do (if success-p
                     (message "Confirmed success reported.")
                   (message "W: Success not confirmed!"))
                 (message "Found evens: %s" found-evens)
                 (message "Found odds: %s" found-odds))
     ;; Always return a list containing the list of even numbers and the list of odd
     ;; numbers.
     (finally-return (list found-evens found-odds)))
  #+END_SRC

  Loopy is not the only Lisp library that uses expressions instead of keyword
  clauses (like in =cl-loop=).  [[https://common-lisp.net/project/iterate/][=iterate=]] and [[https://github.com/Shinmera/for/][=for=]] are two examples in Common
  Lisp.  I know of no examples for Emacs Lisp.

  Though I am not familiar with either, it seems to me that the =loopy= macro is
  more like =for= than it is like =iterate=.  I suspect that, given it’s youth,
  Loopy is much simpler than both.

  #+begin_src emacs-lisp
    ;; Collecting 10 random numbers:
    ;; cl-loop, iterate, for, loopy

    (cl-loop repeat 10 collect (random 10))

    (iterate (repeat 10) (collect (random 10)))

    (for:for ((i repeat 10) (randoms collecting (random 10))))

    (loopy ((repeat 10) (collect (random 10))))
  #+end_src

  Generally, I’d expect that all of the packages handle basic use cases in
  similar ways.  While =iterate= can apparently embed its looping constructs in
  arbitrary code, =loopy= doesn’t allow that, and I believe that the same is
  true of =for=.

  However, Loopy is not yet feature complete.  Please request features or report
  problems in this project’s [[https://github.com/okamsn/loopy/issues][issues tracker]].  While most things are covered,
  full feature parity with =cl-loop= is still being worked on.

* How to Install                                                   :noexport:
  Currently, Loopy must be installed manually.

* How to use
  :PROPERTIES:
  :CUSTOM_ID: how-to-use
  :END:

  Macro arguments set up the lexical environment the loop runs in, Lisp code
  that runs before or after the loop, and the ultimate return value of the
  macro.  See the section [[#macro-arguments][Macro Arguments]].

  “Loop commands” are the main feature of the =loopy= macro and make up the
  =loop= macro argument, such as =list= in =(list i '(1 2 3))=.  A command
  inserts code into the loop body, but can also perform additional setup, such
  as initializing specified or implicit variables.  Many commands set up a
  condition for ending the loop.  See the section [[#loop-commands][Loop Commands]].

  The loop ends when any condition required by a loop command evaluates to
  false.  If no conditions are needed, the loop runs infinitely until a =return=
  or =return-from= command is reached.  See the section [[#exiting-the-loop-early][Exiting the Loop Early]].

  Except when using [[#accumulation-commands][accumulating loop commands]], return values must be stated
  explicitly, either as an early return in the loop body via the =return= or
  =return-from= commands, or as part of the =finally-return= macro argument.
  =nil= is returned by default.

** Macro Arguments
   :PROPERTIES:
   :CUSTOM_ID: macro-arguments
   :END:

   =loopy= takes at most 7 arguments, which are all technically optional.
   Calling the =loopy= macro without arguments creates an infinite loop that
   does nothing.

   You can name a loop by passing =loopy= an unquoted symbol.  All other
   arguments are expressions that begin with a keyword from the list below.
   For clarity and convenience, some keywords have multiple names and the =loop=
   keyword can be excluded.

   #+findex: with, let*
   - =with=, =let*= :: Declare variables before the loop.

   #+findex: before-do, before
   - =before-do=, =before= :: Run Lisp expressions before the loop starts.

   #+findex: loop
   - =loop= (or no keyword) :: Add expressions to the loop body, perform any
     setup like initializing variables or adding exit conditions.

   #+findex: after-do, after, else-do, else
   - =after-do=, =after=, =else-do=, =else= :: Run Lisp expressions after the
     loop successfully completes.  This is similar to Python’s ~else~ loop
     clause.

   #+findex: finally-do, finally
   - =finally-do=, =finally= :: Always run Lisp expressions after the loop
     exits.

   #+findex: finally-return, return macro argument
   - =finally-return=, =return= :: Return a value, regardless of how the loop
     completes.  Accumulation commands have an implicit return value, but this
     overrides them.

   The loop body and any expressions that are part of the =before-do= and
   =after-do= arguments are contained in a single =cl-block=.  Naming the loop
   really just names the block, allowing for more specific exiting via
   ~cl-return~ and the loop commands that wrap it.

   Finally, =(finally-return 1 2 3)= is the same as =(finally-return (list 1 2
   3))=.  This is convenient when using ~seq-let~, ~pcase-let~,
   ~cl-destructuring-bind~, and the like.

** Loop Commands
   :PROPERTIES:
   :CUSTOM_ID: loop-commands
   :END:

   Loop commands are only valid when inside the =loop= macro argument.  For
   convenience, you do not need to include the keyword =loop= in the argument.
   An expression that doesn’t match any other possible argument is assumed to be
   the =loop= argument.

   Therefore, these are valid:

   #+BEGIN_SRC emacs-lisp
     (loopy (loop (list i '(1 2 3))
                  (collect coll i))
            (finally-return coll))

     (loopy ((list i '(1 2 3))
             (collect coll i))
            (return coll))
   #+END_SRC

   and this is not:

   #+BEGIN_SRC emacs-lisp
     (loopy (with (list i '(1 2 3)))
            (return (collect coll i)))
   #+END_SRC

   Trying to use loop commands where they don't belong will result in errors
   when the code is evaluated.

   Underneath, interpreting a command results in "instructions" that describe
   how to substitute code into the loop body and other locations.  This process
   is described in detail in [[#background-information][Background Information]].

   Some examples of instructions are:
   - Declaring a given variable in a let form to make sure it's locally
     scoped.
   - Declaring a generated variable in a let form to contain a given value.
   - Adding a condition for continuing/exiting the loop.
   - Adding code to be run during the main loop body.
   - Adding code to be run after the main loop body.

  Unless you are writing custom commands, you should not need to know about a
  command’s underlying instructions.  However, you should keep in mind that
  commands and their resulting instructions are evaluated in order.  This means
  that attempting to do something like

   #+BEGIN_SRC emacs-lisp
     (loopy (loop (collect coll i)
                  (list i '(1 2 3)))
            (return coll)) ; => (nil 1 2)
   #+END_SRC

   might not do what you expect, as =i= is assigned a value from the list after
   collecting =i= into =coll=.

   For convenience and understanding, the same command can have multiple names
   (such as =expr= having the alias =exprs=), and some commands can take
   optional arguments (such as =list=).

   For simplicity, the commands are described using the following notation:

   - If a command has multiple names, the names are separated by a vertical
     bar, such as in =expr|exprs=.
   - =VAR= is an unquoted symbol that will be used as a variable name, such as
     =i= in =(list i my-list)=.
   - =FUNC= is a Lisp function name, such as =my-func=, =#'my-func= or
     ='my-func=.
   - =NAME= is an unquoted name of a loop (or, more accurately, of a
     =cl-block=).
   - =EXPR= is a single Lisp expression, such as =(+ 1 2)=, ='(1 2 3)=,
     =my-var=, or =(some-function my-var)=.  =EXPRS= means multiple expressions.
     Really, we are concerned with the value of the expression, not the
     expression itself.
   - =CMD= is a loop command, as opposed to a normal Lisp expression.
     =(list i '(1 2 3))=, =(repeat 5)=, and =(return-from outer-loop 7)=
     are examples of loop commands.  =CMDS= means multiple commands.
   - Optional arguments are surround by brackets.  =[EXPR]= is an optional
     expression, and =[CMD]= is an optional command.  By extension,
     =[EXPRS]= is equivalent to =[EXPR [EXPR [...]]]=, and =[CMDS]= to
     =[CMD [CMD [...]]]=.

   Generally, =VAR= is initialized to ~nil~, but not always.  This document
   tries to note when that is not the case.

   #+cindex: variable destructuring
   For convenience, =VAR= can be a sequence (either a list or a vector (as a
   stand-in for an array)) of symbols instead of a single symbol.  This tells
   the command to “de-structure” the value of =EXPR=, similar to the functions
   ~seq-let~, ~cl-destructuring-bind~, and ~pcase-let~.  This sequence of
   symbols can be shorter than the destructured sequence, /but not longer/.  If
   shorter, the unassigned elements of the list are simply ignored.  To assign
   the final ~cdr~ of a destructured list, use dotted notation.

   #+begin_src emacs-lisp
     ;; => [(9 10 11 4) (9 10 11 8)]
     (loopy (with (my-array [(1 2 3 4) (5 6 7 8)]))
            ((array-ref (i j k) my-array)
             ;; NOTE: The remaining elements are ignored.
             (do (setf i 9)
                 (setf j 10)
                 (setf k 11)))
            (return my-array))

     ;; => ([9 10 11 4] [9 10 11 8])
     (loopy (with (my-list '([1 2 3 4 ] [5 6 7 8])))
            ((list-ref [i j k] my-list)
             ;; NOTE: The remaining elements are ignored.
             (do (setf i 9)
                 (setf j 10)
                 (setf k 11)))
            (return my-list))

     ;; => (1 (2 3))
     (loopy ((list (i . j) '((1 2 3))))
            (return i j))

     ;; => ((1 22))
     (loopy (with (my-list '((1 2 3))))
            ((list-ref (_ . j) my-list)
             (do (setf j '(22))))
            (return my-list))

     ;; => [(1 22)]
     (loopy (with (my-array [(1 2 3)]))
            ((array-ref (_ . j) my-array)
             (do (setf j '(22))))
            (return my-array))
   #+end_src

   Most commands that assign variables (even the =-ref= commands, which use
   ~setf~-able places instead of actual variables) can use destructuring, but
   not all kinds of destructuring make sense in all situations.

*** Commands for Generic Evaluation
    :PROPERTIES:
    :CUSTOM_ID: commands-for-generic-evaluation
    :END:

    #+findex: do
    - =(do EXPRS)= :: Evaluate multiple Lisp expressions, like a =progn=.

      You cannot include arbitrary code in the loop body.  Trying to do so will
      result in errors, as the macro will attempt to interpret such code as a
      command.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 2 3))
                (do (message "%d" i))))
      #+END_SRC

    #+findex: expr, exprs, set
    - =(expr|exprs|set VAR [EXPRS])= :: Bind =VAR= to each =EXPR= in order.
      Once the last =EXPR= is reached, it is used repeatedly for the rest of the
      loop.  With no =EXPR=, =VAR= is repeatedly bound to =nil=.

      *NOTE*: Loops are locally scoped, so using this command does not always
      have the same effect as using =(do (setq VAR EXPR))=, as =VAR= is
      initialized to =nil= before the loop starts.

      #+BEGIN_SRC emacs-lisp
        (loopy ((repeat 5)
                (expr i 1 2 3)
                (collect coll i))
               (return coll)) ; => '(1 2 3 3 3)

        (loopy ((repeat 5)
                (expr i 0 (1+ i))
                (collect coll i))
               (return coll)) ; => '(0 1 2 3 4)
      #+END_SRC

    #+findex: group
    - =(group [CMDS])= :: Evaluate multiple loop commands, as if in a =progn=.
      This is similar to =do=, but runs commands instead of normal Lisp
      expressions.  Currently, this command is only useful when used with the
      =if= command.

*** Iteration and Looping Commands
    :PROPERTIES:
    :CUSTOM_ID: iteration-and-looping-commands
    :END:

    Iteration commands bind local variables and determine when the loop ends.
    If no command sets that condition, then the loop runs forever.

    The =-ref= (as in “reference”) commands create ~setf~-able places instead of
    true variables.  Like other commands, they can also use destructuring.  In
    such cases, the variables in the sequence =VAR= are also ~setf~-able places
    instead of true variables.

    #+findex: array
    - =(array VAR EXPR)= :: Loop through the elements of the array =EXPR=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((array i [1 2 3])
                (do (message "%d" i))))
      #+END_SRC

    #+findex: array-ref, arrayf
    - =(array-ref|arrayf VAR EXPR)= :: Loop through the elements of the array
      =EXPR=, binding =VAR= as a ~setf~-able place.

      #+BEGIN_SRC emacs-lisp
        (loopy (with (my-str "cat"))
               (loop (array-ref i my-str)
                     (do (setf i ?a)))
               (return my-str)) ; => "aaa"
      #+END_SRC

    #+findex: cons, conses
    - =(cons|conses VAR EXPR [FUNC])= :: Loop through the cons cells of =EXPR=.
      Optionally, find the cons cells via =FUNC= instead of =cdr=.

      To avoid unneeded variables, when not destructuring, =VAR= is initialized
      to =EXPR= instead of ~nil~.

      #+BEGIN_SRC emacs-lisp
        (loopy (loop (cons i '(1 2 3))
                     (collect coll i))
               (finally-return coll)) ; => ((1 2 3) (2 3) (3))
      #+END_SRC

    #+findex: list
    - =(list VAR EXPR [FUNC])= :: Loop through the elements of the list =EXPR=.
      Optionally, update the list by =FUNC= instead of =cdr=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i (number-sequence 1 10 3)) ; Inclusive, so '(1 4 7 10).
                (do (message "%d" i))))
      #+END_SRC

    #+findex: list-ref, listf
    - =(list-ref|listf VAR EXPR [FUNC])= :: Loop through the elements of the
      list =EXPR=, binding =VAR= as a ~setf~-able place.  Optionally, update the
      list by =FUNC= instead of =cdr=.

      #+BEGIN_SRC emacs-lisp
        (loopy (with (my-list '(1 2 3)))
               (loop (list-ref i my-list)
                     (do (setf i 7)))
               (finally-return my-list)) ; Returns '(7 7 7).
      #+END_SRC

    #+findex: repeat
    - =(repeat EXPR)= :: Add a condition that the loop should stop after
      =EXPR= iterations.

      #+BEGIN_SRC emacs-lisp
        (loopy ((repeat 3)
                (do (message "Messaged three times."))))
      #+END_SRC

    - =(repeat VAR EXPR)= :: Add a condition that the loop should stop after
      =EXPR= iterations.  =VAR= starts at 0, and is incremented by 1 at the
      end of the loop.

      #+BEGIN_SRC emacs-lisp
        (loopy ((repeat i 3)
                (do (message "%d" i))))
      #+END_SRC

    #+findex: seq
    - =(seq VAR EXPR)= :: Loop through the sequence =val=, binding =var= to
      the elements of the sequence.

      #+BEGIN_SRC emacs-lisp
        (loopy ((seq i [1 2 3]) (collect coll i))
               (return coll)) ; => (1 2 3)
      #+END_SRC

    #+findex: seq-ref, seqf
    - =(seq-ref|seqf VAR EXPR)= :: Loop through the elements of the sequence
      =val=, binding =var= as a ~setf~-able place.

      #+BEGIN_SRC emacs-lisp
        (loopy (with (my-seq '(1 2 3 4)))
               (loop (seq-ref i my-seq)
                     (do (setf i 7)))
               (return my-seq)) ; => '(7 7 7 7)
      #+END_SRC

*** Accumulation Commands
    :PROPERTIES:
    :CUSTOM_ID: accumulation-commands
    :END:

    Accumulation commands are used to repeatedly update a variable using a
    value.  In that way, they are something like shortcuts for several different
    ways of using the =expr= command.  For example, =(sum my-sum my-var)= is
    really just another way of saying =(expr my-sum 0 (+ my-sum my-var))=.

    If needed, you can refer to the same variable in multiple accumulation
    commands, such as in the following.

    #+begin_src emacs-lisp
      (loopy ((list i '(1 2 3))
              (collect coll i)
              (collect coll (+ i 5)))
             (return coll)) ; => (1 6 2 7 3 8)
    #+end_src

    #+cindex: accumulation destructuring
    Using a “destructuring” =VAR= argument in accumulation commands works a bit
    differently than how it would in iteration commands.  While iteration
    commands just assign variables the values that make up the destructured
    =EXPR=, accumulation commands accumulate each of those values into their
    respective variable in the sequence =VAR=.

    #+begin_src emacs-lisp
      ;; => ((1 4) (2 5) (3 6))
      (loopy ((list elem '((1 2 3) (4 5 6)))
              (collect (coll1 coll2 coll3) elem))
             (return coll1 coll2 coll3))

      ;; => (5 7 9)
      (loopy ((list elem '((1 2 3) (4 5 6)))
              (sum (sum1 sum2 sum3) elem))
             (return sum1 sum2 sum3))

      ;; Returns the same values as above.
      (loopy ((list elem '((1 2 3) (4 5 6)))
              (expr sum1 (cl-first elem)  (+ sum1 (cl-first elem)))
              (expr sum2 (cl-second elem) (+ sum2 (cl-second elem)))
              (expr sum3 (cl-third elem)  (+ sum3 (cl-third elem))))
             (return sum1 sum2 sum3))
    #+end_src

    #+cindex: implied/implicit return values
    Using an accumulation command implies a return value.  If there are multiple
    accumulations, or destructured accumulations, than the implied return value
    of the loop is a list of those accumulated values in the order that their
    respective command occurs in the loop body.  This implied return value can
    be overridden by using the =return= and =return-from= loop commands or a
    =finally-return= macro argument.

    #+begin_src emacs-lisp
      ;; Note that `my-collection' is the first value in the implied return,
      ;; even though the collection happens after the first summation step.
      ;;
      ;; => (((4 5 6)) 5 7 9), for `my-collection', `sum1', `sum2', `sum3'
      (loopy ((list elem '((1 2 3) (4 5 6)))
              (when (equal elem '(4 5 6))
                (collect my-collection elem))
              (sum (my-sum1 my-sum2 my-sum3) elem)))
    #+end_src

    #+cindex: implied/implicit accumulation variables
    Like ~cl-loop~, you do not need to supply a variable name to accumulation
    commands.  With only one argument, they accumulate values into a generated
    variable and use that variable as an implicit return value.  Unlike
    ~cl-loop~, this generation means that if you want accumulation commands to
    act on the same variable, you must supply the same =VAR= as the first
    argument to each command.

    The commands =collect=, =append=, and =nconc= are more efficient if no =VAR=
    is provided, constructing the accumulated value backwards and then reversing
    it, which is usually faster.

    #+findex: append
    - =(append VAR EXPR)= :: Repeatedly ~append~ the value of =EXPR= to =VAR=.
      If =VAR= is not provided, repeatedly ~nconc~ the ~reverse~ of =EXPR= onto
      the front of the implicit return value, and then ~nreverse~ the implicit
      value at the end of the loop.

      =VAR= starts as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '((1 2 3) (4 5 6)))
                (append coll i))
               (return coll)) ; => '(1 2 3 4 5 6)
      #+END_SRC

    #+findex: collect
    - =(collect VAR EXPR)= :: Collect the value of =EXPR= into a list.  If =VAR=
      is not provided, repeatedly ~push~ the value of =EXPR= into he implicit
      return value, and then ~nreverse~ the implicit return value at the end of
      the loop.

      =VAR= starts as =nil=.

      #+BEGIN_SRC emacs-lisp
        ;; => '(1 2 3)
        (loopy ((list i '(1 2 3))
                (collect i)))

        ;; => '((1 2 3) ((1) (1 2) (1 2 3)))
        (loopy ((list i '(1 2 3))
                (collect coll1 i)
                (collect coll1)))
      #+END_SRC

      If you want to ~push~ values into a provided variable (instead of
      repeatedly appending a list of one element), use the =push-into= command
      (see below).

    #+findex: concat
    - =(concat VAR EXPR)= :: Repeatedly =concat= the value of =EXPR= onto the
      end of =VAR=.  =VAR= starts as =nil=.  See the =vconcat= command for
      vectors.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '("a" "b" "c"))
                (concat str i))
               (return str)) ; => "abc"
      #+END_SRC

    #+findex: count
    - =(count VAR EXPR)= :: Count the number of times that =EXPR= evaluates to a
      non-nil value, adding 1 to =VAR= each time.  =VAR= starts at 0.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 nil 3 nil 5))
                (count non-nil-count i))
               (return non-nil-count)) ; => 3
      #+END_SRC

    #+findex: max, maximize
    - =(max|maximize VAR EXPR)= :: Repeatedly set =VAR= to the greater of =VAR=
      and the value of =EXPR=.  =VAR= starts at =-1.0e+INF=, so that any other
      value should be greater that it.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 11 2 10 3 9 4 8 5 7 6))
                (max my-max i))
               (return my-max)) ; => 11
      #+END_SRC

    #+findex: min, minimize
    - =(min|minimize VAR EXPR)= :: Repeatedly set =VAR= to the lesser of =VAR=
      and the value of =EXPR=.  =VAR= starts at =1.0e+INF=, so that any other
      value should be less than it.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 11 2 10 3 0 9 4 8 5 7 6))
                (min my-min i))
               (return my-min)) ; => 0
      #+END_SRC

    #+findex: nconc
    - =(nconc VAR EXPR)= :: Repeatedly concatenate the value of =EXPR= onto
      =VAR= with =nconc=.  If =VAR= is not provided, repeatedly ~nconc~ the
      ~nreverse~ of =EXPR= onto the front of the implicit return value, and then
      ~nreverse~ that implicit return value at the end of the loop.

      Unlike ~append~, ~nconc~ does not concatenate copies of the lists, but
      modifies =VAR= directly.

      #+BEGIN_SRC emacs-lisp
        (loopy (loop (list i '((1 2 3 4) (5 6 7 8)))
                     (nconc my-new-list i))
               (return my-new-list)) ; => '(1 2 3 4 5 6 7 8)
      #+END_SRC

    #+findex: push, push-into
    - =(push|push-into VAR EXPR)= :: Repeatedly =push= =EXPR= into =VAR=.  =VAR=
      stars as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((seq i [1 2 3])
                (push reversed i))
               (finally-return (nreverse reversed))) ; => '(1 2 3)
      #+END_SRC

    #+findex: sum
    - =(sum VAR EXPR)= :: Repeatedly set =VAR= to the sum of the value of =EXPR=
      and =VAR=.  =VAR= starts at 0.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '(1 2 3 4))
                (sum my-sum i))
               (return my-sum)) ; => 10
      #+END_SRC

    #+findex: vconcat
    - =(vconcat VAR EXPR)= :: Repeatedly =vconcat= the value of =EXPR= onto
      =VAR=.  =VAR= starts as =nil=.

      #+BEGIN_SRC emacs-lisp
        (loopy ((list i '([1 2 3] [4 5 6]))
                (vconcat vector i))
               (return vector)) ; => [1 2 3 4 5 6]
      #+END_SRC

*** Control Flow
    :PROPERTIES:
    :CUSTOM_ID: control-flow
    :END:

**** Conditionals
     :PROPERTIES:
     :CUSTOM_ID: conditionals
     :END:

     Conditional commands in =loopy= can take multiple sub-commands, and work
     like their Lisp counterparts.  There is therefore no need for an =and=
     command as used in =cl-loop=.

    #+findex: when
     - =(when EXPR CMDS)= :: Run =CMDS= only if =EXPR= is non-nil.

       #+BEGIN_SRC emacs-lisp
         ;; Get only the inner lists with all even numbers.
         ;; => '((2 4 6) (8 10 12) (16 18 20))
         (loopy ((list i '((2 4 6) (8 10 12) (13 14 15) (16 18 20)))
                 (when (loopy ((list j i)
                               (when (cl-oddp j)
                                 (return nil)))
                              (else-do (cl-return t)))
                   (collect only-evens i)))
                (finally-return only-evens))
       #+END_SRC

    #+findex: if
     - =(if EXPR CMDS)= :: Run the first command if =EXPR= is non-nil.
       Otherwise, run the remaining commands.

       #+BEGIN_SRC emacs-lisp
         ;; => '((7 5 3 1) (6 4 2) (3 3 3))
         (loopy ((seq i [1 2 3 4 5 6 7])
                 (if (cl-oddp i)
                     (push-into reversed-odds i)
                   (push-into reversed-evens i)
                   (push-into some-threes 3)))
                (finally-return (list reversed-odds
                                      reversed-evens
                                      some-threes)))
       #+END_SRC

    #+findex: cond
     - =(cond [(EXPR CMDS) [...]])= :: For the first =EXPR= to evaluate to
       non-nil, run the following commands =CMDS=.

       #+BEGIN_SRC emacs-lisp
         ;; => '((2 4 6) (1 3 5) ("cat" "dog"))
         (loopy ((list i '(1 2 3 "cat" 4 5 6 "dog"))
                 (cond
                  ((not (numberp i)) (collect not-numbers i))
                  ((cl-evenp i)      (collect evens i))
                  (t                 (collect odds i))))
                (return evens odds not-numbers))
       #+END_SRC

**** Skipping an Iteration
     :PROPERTIES:
     :CUSTOM_ID: skipping-an-iteration
     :END:

    #+findex: skip, continue
     - =(skip|continue)= :: Go to next loop iteration.

       #+BEGIN_SRC emacs-lisp
         ;; => (2 4 6 8 12 14 16 18)
         (loopy ((seq i (number-sequence 1 20))
                 (when (zerop (mod i 10))
                   (skip))
                 (when (cl-evenp i)
                   (push-into my-collection i)))
                (finally-return (nreverse my-collection)))
       #+END_SRC

**** Exiting the Loop Early
     :PROPERTIES:
     :CUSTOM_ID: exiting-the-loop-early
     :END:

     The loop is contained in a =cl-block=, and these forms are all variations
     of =cl-return-from= underneath.  Indeed, you could use =(do (cl-return-from
     NAME [EXPR]))= to achieve the same effect.

     If multiple =EXPR= are passes to the =return= or =return-from=, these
     commands will return a list of those =EXPR=.  If not =EXPR= is given, =nil=
     is returned.

    #+findex: return loop command
     - =(return [EXPRS])= :: Leave the current loop, returning =[EXPRS]=.

       #+BEGIN_SRC emacs-lisp
         (loopy (with  (j 0))
                ((do (cl-incf j))
                 (when (> j 5)
                   (return j)))) ; => 6
       #+END_SRC

    #+findex: return-from
     - =(return-from NAME [EXPRS])= :: Leave the loop =NAME=, returning =[EXPRS]=.

       #+BEGIN_SRC emacs-lisp
         ;; => 'bad-val?
         (loopy outer-loop
                ((list inner-list '((1 2 3) (1 bad-val? 1) (4 5 6)))
                 (do (loopy ((list i inner-list)
                             (when (eq i 'bad-val?)
                               (return-from outer-loop 'bad-val?)))))))
       #+END_SRC

* Adding Custom Commands
  :PROPERTIES:
  :CUSTOM_ID: adding-custom-commands
  :END:

** Background Information
   :PROPERTIES:
   :CUSTOM_ID: background-information
   :END:

   The core working of =loopy= is taking a command and generating code that is
   substituted into or around a loop body.

   For example, parsing the command =(list i '(1 2 3))= produces the following
   list of instructions.  Some commands require the creation of unique temporary
   variables, such as =g3019= in the below output. Such variables are called
   “implicit", as opposed to the explicitly named variable =i= in the command.

   #+BEGIN_SRC emacs-lisp
     ((loopy--implicit-vars g3019 '(1 2 3))
      (loopy--explicit-vars i nil)
      (loopy--pre-conditions consp g3019)
      (loopy--main-body setq i (car g3019))
      (loopy--latter-body setq g3019 (cdr g3019)))
   #+END_SRC

   The ~car~ of an instruction is the place to put code and the ~cdr~ of the
   instruction is said code to put.  You can see that not all of the code to be
   inserted is a valid Lisp form.  Instead of being evaluated as an expression,
   some instructions insert pairs of names and values into variable lists like
   in ~let~ and ~let*~ .

   | Place                     | Code                         |
   |---------------------------+------------------------------|
   | =loopy--implicit-vars=    | =(g3019 '(1 2 3))=           |
   | =loopy--explicit-vars=    | =(i nil)=                    |
   | =loopy--pre-conditions=   | =(consp g3019)=              |
   | =loopy--main-body=        | =(setq i (car g3019))=       |
   | =loopy--latter-body=      | =(setq g3019 (cdr g3019))=   |

   Commands are parsed by =loopy--parse-body-forms=, which receives a list of
   commands and returns a list of instructions.  For commands that take
   sub-commands as arguments (such as =cond=, =if=, and =when=), more specific
   parsing functions are called in a mutually recursive fashion (e.g.,
   Function-1 uses Function-2 which uses Function-1, and so on).

   For example, consider the function =loopy--parse-conditional-forms=, which
   parses the =if=, =when=, and =unless= commands.  It needs to be able to group
   any code going to the loop body under its respective conditional control
   structure.  To do this, it uses =loopy--parse-body-forms= to turn its
   sub-commands into a list of instructions, and then checks the =car= of each
   instruction.

   #+BEGIN_SRC emacs-lisp
     (defun loopy--parse-conditional-forms (wrapper condition forms &optional loop-name)
       "Parse FORMS, wrapping `loopy--main-body' expressions in a conditional form.
     The instructions (e.g., return expressions) are wrapped with a
     WRAPPER with CONDITION.  Optionally needs LOOP-NAME for block
     returns."
       (let ((full-instructions)
             (sub-instructions (loopy--parse-body-forms forms loop-name))
             (conditional-body))
         (dolist (instruction sub-instructions)
           (cl-case (car instruction)
             (loopy--main-body (push (cdr instruction) conditional-body))
             (t                (push instruction full-instructions))))
         (push `(loopy--main-body . (,wrapper ,condition ,@conditional-body))
               full-instructions)
         full-instructions))
   #+END_SRC

   The hardest part of this exchange is making sure the inserted code ends up in
   the correct order.

   A loop body command has 7 main places to put code:

   #+vindex: loopy--explicit-generalized-vars
   - =loopy--explicit-generalized-vars= :: Lists of a symbol and a macro
     expansion that will be given to =cl-symbol-macrolet=.  This is used to
     create named ~setf~-able places.  The expansion you use depends on the kind
     of sequence and how the it is updated.

     For example, =(list-ref i my-list)= declares =i= to be a symbol which
     expands to =(car TEMP-VAR)=, in which =TEMP-VAR= holds the value of
     =my-list=.  At the end of the loop body, =TEMP-VAR= is set to its =cdr=,
     ensuring that the next call to =car= returns the correct value.

   #+vindex: loopy--implicit-vars
   - =loopy--implicit-vars= :: Lists of a symbol and an expression that will be
     given to =let=.  This is used for creating variables that are not named but
     must exist, such as for holding ='(1 2 3)= in =(list i '(1 2 3))=.

   #+vindex: loopy--explicit-vars
   - =loopy--explicit-vars= :: Lists of a symbol and an expression that will be
     given to =let=.  This is needed to ensure that variables explicitly named
     in commands are locally scoped, such as the =i= in =(list i '(1 2 3))=.

   #+vindex: loopy--pre-conditions
   - =loopy--pre-conditions= :: Expressions that determine if the =while=
     loop runs/continues, such as whether a list still has elements in it.
     If there is more than one expression, than all expressions are used in
     an =and= special form.

   #+vindex: loopy--main-body
   - =loopy--main-body= :: Expressions that make up the main body of the
     loop.

   #+vindex: loopy--latter-body
   - =loopy--latter-body= :: Expressions that need to be run after the main
     body, such as updating implicit variables.

   #+vindex: loopy--post-conditions
   - =loopy--post-conditions= :: Expressions that determine whether the
     =while= loop continues, but checked after the loop body has run.  The
     code from this is ultimately appended to the latter body before being
     substituted in.

   There are 5 more variables a loop command can push to, but they are derived
   from the macro's arguments.  Adding to them after using a macro argument
   might lead to unintended behavior.  You might wish to use them if, for
   example, you are concerned with what happens after the loop exits/completes.

   #+vindex: loopy--with-vars
   - =loopy--with-vars= :: Lists of a symbol and an expression that will be
     given to =let*=.  These are derived from the =with= macro argument.

   #+vindex: loopy--before-do
   - =loopy--before-do= :: Expressions to evaluate before the loop.  These are
     derived from the =before-do= macro argument.

   #+vindex: loopy--after-do
   - =loopy--after-do= :: Expressions to evaluate after the loop completes
     successfully.  These are derived from the =after-do= macro argument.

   #+vindex: loopy--final-do
   - =loopy--final-do= :: Expressions to evaluate after the loop completes,
     regardless of success.  These are derived from the =finally-do= macro
     argument.

   #+vindex: loopy--final-return
   - =loopy--final-return= :: An expression that is always returned by the
     macro, regardless of any early returns in the loop body.  This is
     derived from the =finally-return= macro argument.

   The structure of the macro’s expanded code depends on the features used
   (e.g., =loopy= won’t try to declare variables if none exist), but the result
   will work similar to the below example.

   #+BEGIN_SRC emacs-lisp
     `(cl-symbol-macrolet ,loopy--explicit-generalized-vars
        (let* ,loopy--with-vars
          (let ,(append loopy--implicit-vars loopy--explicit-vars)
            (let ((loopy--early-return-capture
                   (cl-block ,loopy--name-arg
                     ,@loopy--before-do
                     (while ,(cl-case (length loopy--pre-conditions)
                               (0 t)
                               (1 (car loopy--pre-conditions))
                               (t (cons 'and loopy--pre-conditions)))
                       (cl-tagbody
                        ,@loopy--main-body
                        loopy--continue-tag
                        ,@loopy--latter-body))
                     ,@loopy--after-do
                     nil)))
              ,@loopy--final-do
              ,(if loopy--final-return
                   loopy--final-return
                 'loopy--early-return-capture)))))
   #+END_SRC

** A Small Example
   :PROPERTIES:
   :CUSTOM_ID: a-small-example
   :END:

   To implement a custom loop body command, =loopy= needs two pieces of
   information:
   1. The keyword that names your command
   2. The parsing function that can turn uses of your command into instructions.

   Importantly, your custom commands cannot share a name.

   For example, say that you're tired of typing out
   =(do (message "Hello, %s" first last))= and would prefer to instead use
   =(greet FIRST [LAST])=.  This only requires pushing code into the main
   loopy body, so the definition of the parsing function is quite simple.

   #+BEGIN_SRC emacs-lisp
     (cl-defun my-loopy-greet-command-parser ((_ first &optional last))
       "Greet one with first name FIRST and optional last name LAST."
       `((loopy--main-body . (if ,last
                                 (message "Hello, %s %s" ,first ,last)
                               (message "Hello, %s" ,first)))))
   #+END_SRC

   =loopy= will pass the entire command expression to the parsing function, and
   expects back a list of instructions.

   #+vindex: loopy-custom-command-parsers
   To tell =loopy= about this function, add it and the command name =greet= to
   the variable =loopy-custom-command-parsers=.  When ~loopy~ doesn’t recognize
   a command, it will search in this alist for a matching symbol.  The function
   that is paired with the symbol receives the entire command expressions, and
   should produce a list of valid instructions.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'loopy-custom-command-parsers
                  '(greet . my-loopy-greet-command-parser))
   #+END_SRC

   After that, you can use your custom command in the loop body.

   #+BEGIN_SRC emacs-lisp
     (loopy ((list name '(("John" "Deer") ("Jane" "Doe") ("Jimmy")))
             (greet (car name) (cadr name))))
   #+END_SRC

   By running =M-x pp-macroexpand-last-sexp= on the above expression, you can
   see that it expands to do what we want, as expected.

   #+BEGIN_SRC emacs-lisp
     (let ((g815 '(("John" "Deer")
                   ("Jane" "Doe")
                   ("Jimmy")))
           (name nil))
       (while (consp g815)
         (setq name (car g815))
         (if (cadr name)
             (message "Hello, %s %s"
                      (car name) (cadr name))
           (message "Hello, %s" (car name)))
         (setq g815 (cdr g815)))
       nil)
   #+END_SRC

** A Slightly More Complicated Example
   :PROPERTIES:
   :CUSTOM_ID: a-slightly-more-complicated-example
   :END:

   Lets say we want to emulate =cl-loop='s =always= clause, which causes the
   loop to return =nil= if an expression evaluates to =nil= and =t= otherwise.

   Here is an example:

   #+BEGIN_SRC emacs-lisp
     (cl-loop for i in (number-sequence 1 9) always (< i 10)) ; => t
   #+END_SRC

   Without a custom command, you could translate this using the following.

   #+BEGIN_SRC emacs-lisp
     (loopy ((list i (number-sequence 1 9))
             (unless (< i 10) (return nil)))
            (else-do (cl-return t)))
   #+END_SRC

   While its meaning is clear, this approach is certainly wordier.  Here's how
   you could do it with a custom command:

   #+BEGIN_SRC emacs-lisp
     (cl-defun my--loopy-always-command-parser ((_ &rest conditions))
       "Parse a command of the form `(always [CONDITIONS])'.
     If any condition is `nil', `loopy' should immediately return nil.
     Otherwise, `loopy' should return t."
       (let (instructions)
         ;; Return t if loop completes successfully.
         (push `(loopy--after-do . (cl-return t)) instructions)
         ;; Check all conditions at the end of the loop body, forcing an exit if any
         ;; evaluate to nil.  Since the default return value of the macro is nil, we
         ;; don’t need to do anything else.
         ;;
         ;; NOTE: We must not add anything to `loopy--final-return', since that
         ;;       would override the value of any early returns.
         (dolist (condition conditions)
           (push `(loopy--post-conditions . ,condition) instructions))
         instructions))

     (add-to-list 'loopy-custom-command-parsers
                  (cons 'always #'my--loopy-always-command-parser))

     ;; One condition: => t
     (loopy ((list i (number-sequence 1 9)) (always (< i 10))))

     ;; Two conditions: => nil
     (loopy ((list i (number-sequence 1 9))
             (list j '(2 4 6 8 9))
             (always (< i 10) (cl-evenp j))))
   #+END_SRC

   This command (and equivalents of the =never= and =thereis= clauses) aren’t
   provided by default on the assumption that modifying values normally derived
   from macro arguments might prove confusing and unexpected.

* How does it compare to =cl-loop=?
  :PROPERTIES:
  :CUSTOM_ID: how-does-it-compare-to-other-approaches
  :END:

  =loopy= should be comparable with =cl-loop= for most things, keeping in
  mind the following:
  - It is probably less efficient than =cl-loop=, though I am so far trying to
    keep the same logic that =cl-loop= uses.
  - It has more flexible control-flow commands, under which you can easily group
    sub-commands, including assignments.
  - It has a =skip= command to skip the rest of the loop body and immediately
    start the next iteration.  Of course, a similar effect could be achieved
    using the =when= or =unless= commands.

  =loopy= is not always one-to-one replacement for =cl-loop=, but it is easy to
  use and extend, and performs well in the cases that it already handles.

  Below is a simple example of =loopy= vs =cl-loop=.

  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)
    (cl-loop with some-thing = 5
             for i from 1 to 100
             do (message "I is %s" i)
             when (> (+ i 5) 20)
             return (format "Done: %d" i))

    (require 'loopy)
    (loopy (with (some-thing 5))
           ((list i (number-sequence 1 100))
            (do (message "I is %s" i))
            (when (> (+ i 5) 20)
              (return (format "Done: %d" i)))))
  #+END_SRC

  The main benefit (I believe) of Loopy is clearer grouping of commands under
  conditionals while still using a clean syntax, such as in the below example.

  #+BEGIN_SRC emacs-lisp
    ;; => '((2 4) (4 8) (6 12) (8 16) (10 20))
    (loopy ((list i (number-sequence 1 10))
            (when (cl-evenp i)
              (expr once i)
              (expr twice (* 2 i))
              (collect together (list once twice))))
           (finally-return together))
  #+END_SRC

  In my experience, =cl-loop= does not allow the easy grouping of assignment
  statements under a =when= condition.  For example, below is something I would
  like to try to do with =cl-loop=.

  I am aware that in this example the =for= statements aren't necessary and that
  the =collect= statements would be sufficient, but (when I come across things
  like this in my work) I would like to use them to declare variables for
  readability purposes.

  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)
    (save-match-data
      (cl-loop with pattern = "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)"
               for line in (split-string "Line1-Data1\nBad\nLine2-Data2")
               when (string-match pattern line)
               for line-num = (concat "L" (match-string 1 line))
               and for data-num = (concat "D" (match-string 2 line))

               ;; … Further processing now that data is named …

               and collect line-num into line-nums
               and collect data-num into data-nums
               finally return (list line-nums data-nums)))

    ;; Normal Elisp:
    (save-match-data
      (let ((pattern "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)")
            (line-nums)
            (data-nums))
        (dolist (line (split-string "Line1-Data1\nBad\nLine2-Data2"))
          (when (string-match pattern line)
            (let ((line-num (concat "L" (match-string 1 line)))
                  (datum-num (concat "D" (match-string 2 line))))

              ;; … Further processing now that data is named …

              (push line-num line-nums)
              (push datum-num data-nums))))
        (list (nreverse line-nums) (nreverse data-nums))))
  #+END_SRC

  Here is how one could currently do it with =loopy=:

  #+BEGIN_SRC emacs-lisp
    (require 'loopy)
    (save-match-data
      (loopy (with (pattern "^Line\\([[:digit:]]\\)-Data\\([[:digit:]]\\)"))
             ((list line (split-string "Line1-Data1\nBad\nLine2-Data2"))
              (when (string-match pattern line)
                (expr line-num (concat "L" (match-string 1 line)))
                (expr datum-num (concat "D" (match-string 2 line)))

                ;; … Further processing now that data is named …

                (collect line-nums line-num)
                (collect data-nums datum-num)))
             (finally-return line-nums data-nums)))
  #+END_SRC

  I believe that the value of the macro increases for longer loop bodies with
  several conditional commands.

  Another nice ability, one that I'm not sure =cl-loop= has, is a specific
  command for skipping/continuing a loop iteration.  Of course, one could also
  re-organize code under a conditional command like =when= to achieve the same
  effect.

  #+BEGIN_SRC emacs-lisp
    ;; Returns even numbers that aren't multiples of 10.
    (loopy ((list i (number-sequence 1 20))
            (when (zerop (mod i 10))
              (skip))
            (when (cl-evenp i)
              (push-into my-collection i)))
           (finally-return (nreverse my-collection))) ; => (2 4 6 8 12 14 16 18)
  #+END_SRC

** Translating from =cl-loop=
   :PROPERTIES:
   :CUSTOM_ID: translating-from-cl-loop
   :END:

*** For Clauses
    :PROPERTIES:
    :CUSTOM_ID: for-clauses
    :END:

    As Emacs has many functions that return lists, there is no need to implement
    an exact equivalent for every =for=-clause that =cl-loop= has.  Instead, one
    can just iterate through the return value of the appropriate function using
    the =list= command.

    | =cl-loop=                                     | =loopy=                                          |
    |-----------------------------------------------+--------------------------------------------------|
    | =for VAR from EXPR1 to EXPR2 by EXPR3=        | =(list VAR (number-sequence EXPR1 EXPR2 EXPR3))= |
    | =for VAR in LIST [by FUNCTION]=               | =(list VAR LIST [FUNC])=                         |
    | =for VAR on LIST [by FUNCTION]=               | =(cons VAR VAL [FUNC])=                          |
    | =for VAR in-ref LIST by FUNCTION=             | =(list-ref VAR LIST [FUNC])=                     |
    | =for VAR across ARRAY=                        | =(array VAR ARRAY)=                              |
    | =for VAR across-ref ARRAY=                    | =(array-ref VAR ARRAY)=                          |
    | =for VAR being the elements of SEQUENCE=      | =(seq VAR SEQUENCE)=                             |
    | =for VAR being the elements of-ref SEQUENCE=  | =(seq-ref VAR SEQUENCE)=                         |
    | =for VAR being the symbols [of OBARRAY]=      | None so far.  Use ~mapatoms~.                    |
    | =for VAR being the hash-keys of HASH-TABLE=   | =(list VAR (hash-table-keys HASH-TABLE))=        |
    | =for VAR being the hash-values of HASH-TABLE= | =(list VAR (hash-table-values HASH-TABLE))=      |
    | =for VAR being the key-codes of KEYMAP=       | None so far.  Use ~map-keymap~.                  |
    | =for VAR being the key-bindings of KEYMAP=    | None so far.  Use ~map-keymap~.                  |
    | =for VAR being the key-seqs of KEYMAP=        | None so far.                                     |
    | =for VAR being the overlays [of BUFFER]=      | None so far.  Use ~overlay-lists~.               |
    | =for VAR being the intervals [of BUFFER]=     | None so far.                                     |
    | =for VAR being the frames=                    | =(list VAR (frame-list))=                        |
    | =for VAR being the windows [of FRAME]=        | =(list VAR (window-list FRAME))=                 |
    | =for VAR being the buffers=                   | =(list VAR (buffer-list))=                       |
    | =for VAR = EXPR1 then EXPR2=                  | =(expr VAR EXPR1 EXPR2)=                         |

*** Iteration Clauses
    :PROPERTIES:
    :CUSTOM_ID: iteration-clauses
    :END:

    | =cl-loop=          | =loopy=                      |
    |--------------------+------------------------------|
    | =repeat INT=       | =(repeat INT)=               |
    | =while COND=       | =(unless COND (return nil))= |
    | =until COND=       | =(when COND (return nil))=   |
    | =iter-by iterator= | None so far.                 |

    The clauses =always=, =never=, and =thereis= can be replaced by a
    combination of an exiting command and the =after-do= (also written
    =else-do=) macro argument.  Below is an example from the CL Lib manual.

    #+BEGIN_SRC emacs-lisp
      ;; With `cl-loop':
      (if (cl-loop for size in size-list always (> size 10))
          (only-big-sizes)
        (some-small-sizes))

      ;; With `loopy':
      ;; Depends on whether the functions have return values.
      (loopy ((list size size-list)
              ;; `return` is just a wrapper for `cl-return`.
              (when (< size 10) (return (some-small-sizes))))
             ;; Only runs if loop doesn't exit early.
             (else-do (cl-return (only-big-sizes))))
    #+END_SRC

    A seen in the above example, =loopy= does not always have a one-to-one
    translation to =cl-loop= ([[#a-slightly-more-complicated-example][though you could try a custom command]]).

    It is not an explicit goal to be able to replace all uses of =cl-loop= with
    =loopy=.  I'd prefer that =loopy= be useful in places where =cl-loop= might
    not be enough, instead of forcing =loopy= into places where =cl-loop=
    already works well.

    Other options in the above example include using =cl-every=,
    =seq-every-p=, Dash’s =-all?=, etc.

*** Accumulation Clauses
    :PROPERTIES:
    :CUSTOM_ID: accumulation-clauses
    :END:

    In =loopy=, when accumulation commands are not given a =VAR=, they
    accumulate into different variables.  If you want accumulations to act on
    the same variable, you must give the same =VAR=.

    | =cl-loop=                | =loopy=              |
    |--------------------------+----------------------|
    | =append EXPR into VAR=   | =(append VAR EXPR)=  |
    | =collect EXPR into VAR=  | =(collect VAR EXPR)= |
    | =concat EXPR into VAR=   | =(concat VAR EXPR)=  |
    | =count EXPR into VAR=    | =(count VAR EXPR)=   |
    | =maximize EXPR into VAR= | =(max VAR EXPR)=     |
    | =minimize EXPR into VAR= | =(min VAR EXPR)=     |
    | =nconc EXPR into VAR=    | =(nconc VAR EXPR)=   |
    | =sum EXPR into VAR=      | =(sum VAR EXPR)=     |
    | =vconcat EXPR into VAR=  | =(vconcat VAR EXPR)= |

*** Other Clauses
    :PROPERTIES:
    :CUSTOM_ID: other-clauses
    :END:

    In =loopy=, =if=, =when=, and =unless= can take multiple loop commands as
    arguments, and operate more like their Lisp counterparts.

    This means that =if= is not a synonym for =when=.  Just like the normal Lisp
    special form =if=, =(if COND cmd1 cmd2 cmd3)= only runs =cmd1= if =COND=
    evaluates to non-nil, and only runs commands =cmd2= and =cmd3= if =COND=
    evaluates to =nil=.

    =loopy= also provides the command =cond=, which works like the normal Lisp
    special form =cond=.

    | =cl-loop=              | =loopy=                                     |
    |------------------------+---------------------------------------------|
    | =with var = value=     | =(with (VAR VALUE))= as a macro argument    |
    | =if COND clause=       | =(if COND CMDS)= as a loop command          |
    | =when COND clause=     | =(when COND CMDS)= as a loop command        |
    | =unless COND clause=   | =(unless COND CMDS)= as a loop command      |
    | =named NAME=           | =NAME= as a macro argument                  |
    | =initially [do] EXPRS= | =(before-do EXPRS)= as a macro argument     |
    | =finally [do] EXPRS=   | =(finally-do EXPRS)= as a macro argument    |
    | =finally return EXPR=  | =(finally-return EXPR)= as a macro argument |
    | =do EXPRS=             | =(do EXPRS)= as a loop command              |
    | =return EXPR=          | =(return EXPR)= as a loop command           |

*  Real-World Examples

  This section contains examples of loops that exist in real-world commands.  To
  see these loops in context, full examples of those commands can be found in
  the file [[file:loopy-examples.el]] (containing the library =loopy-examples=) that
  comes with this package.

  One command that could see a benefit from using =loopy= is =selectrum-swiper=
  from the Selectrum wiki [fn:sel-wiki].  This command allows a user to jump to
  a matched line in the buffer.  Candidates are created by looping through text
  lines, formatting non-empty lines and collecting the formatted lines into a
  list of candidates.  At the same time, it selects a default candidate by
  finding the non-empty line closest to the current line.

  Here is the main portion of the command, which uses =cl-loop=.

  #+begin_src emacs-lisp
    ;; ...
    (cl-loop
     with buffer-lines = (split-string (buffer-string) "\n")
     with number-format = (concat "L%0"
                                  (number-to-string
                                   (length (number-to-string
                                            (length buffer-lines))))
                                  "d: ")

     with formatted-candidates = nil
     for line-text in buffer-lines
     for line-num = (line-number-at-pos (point-min) t) then (1+ line-num)

     with default-candidate = nil
     with prev-distance-to-default-cand = 1.0e+INF ; This updated later.
     for distance-to-default-cand = (abs (- current-line-number line-num))

     unless (string-empty-p line-text)      ; Just skip empty lines.
     do
     ;; Find if we’ve started to move away from the current line.
     (when (null default-candidate)
       (when (> distance-to-default-cand
                prev-distance-to-default-cand)
         (setq default-candidate (cl-first formatted-candidates)))
       (setq prev-distance-to-default-cand distance-to-default-cand))

     ;; Format current line and collect candidate.
     (push (propertize line-text
                       'selectrum-candidate-display-prefix
                       (propertize (format number-format line-num)
                                   'face 'completions-annotations)
                       'line-num line-num)
           formatted-candidates)

     finally return (list default-candidate
                          (nreverse formatted-candidates)))
    ;; ...
  #+end_src

  The limitations of =cl-loop='s =when= clause encourages relying on Lisp
  expressions rather than clauses for processing.  To use those Lisp
  expressions, one must declare more variables with the =with= clause to ensure
  that those variables are locally scoped.

  Here is how it could be done with =loopy=:

  #+begin_src emacs-lisp
    ;; ...
    (loopy
     (with (buffer-text-lines (split-string (buffer-string) "\n"))
           (number-format (concat "L%0"
                                  (number-to-string
                                   (length (number-to-string
                                            (length buffer-text-lines))))
                                  "d: ")))
     (loop (list line-text buffer-text-lines)
           (expr line-num (line-number-at-pos (point-min) t)
                          (1+ line-num))
           (unless (string-empty-p line-text)
             (push-into formatted-candidates
                        (propertize line-text
                                    'selectrum-candidate-display-prefix
                                    (propertize (format number-format line-num)
                                                'face 'completions-annotations)
                                    'line-num line-num))
             ;; There are a few different ways that you could express
             ;; this.
             (when (null default-candidate)
               (expr prev-dist +1.0e+INF dist-to-default-cand)
               (expr dist-to-default-cand (abs (- current-line-number
                                                  line-num)))
               (when (> dist-to-default-cand prev-dist)
                 (expr default-candidate (cl-second formatted-candidates))))))
     (finally-return default-candidate (nreverse formatted-candidates)))
    ;; ...
  #+end_src

  We can see that most of the loop commands are easily grouped under the
  =unless= command.  This allows for less noise, as we do not need to declare
  variables or fall back to using more Lisp expressions.

  Another good example is the command =selectrum-outline= from the same page.
  This command is similar to =selectrum-swiper=, but has a slightly more
  complicated processing portion.

  The code loops through each line in the buffer, searching for lines that match
  a pre-determined regular expression.  The match data is used to determine the
  heading level (top level, second level, etc.) and the actual heading text.
  The loop produces formatted candidates by prepending this heading text with
  the text of parent headings, as determined by the heading level.  At the same
  time, the loop selects the current heading as the default candidate.

  Instead of using =cl-loop=, this command is written in conventional Emacs
  Lisp.

  #+begin_src emacs-lisp
    ;; ...
    (let (;; Get the basic information of each heading in the accessible
          ;; portion of the buffer.
          (buffer-lines (split-string (buffer-string) "\n"))
          (line-number 0)
          (line-number-format)

          ;; Finding the default heading
          (default-heading)
          (current-line-number (line-number-at-pos (point)))

          ;; Keeping track of the tree.
          (backwards-prefix-list)
          (prev-heading-text)
          (prev-heading-level)

          ;; Backwards result of the ‘dolist'. Will ‘nreverse’.
          (formatted-headings))

      (setq line-number-format
            (concat "L%0"
                    (number-to-string
                     (length (number-to-string (length buffer-lines))))
                    "d: "))

      (save-match-data
        (dolist (text-line buffer-lines)
          ;; Increment line number when moving to next.
          (cl-incf line-number)
          (when (string-match heading-regexp text-line)
            (let ((heading-text (match-string-no-properties 2 text-line))
                  (heading-level
                   (length (match-string-no-properties 1 text-line))))

              ;; Make sure this has a valid value when we first compare.  The
              ;; first comparison should be equal, so that nothing is
              ;; needlessly added to the prefix list, which causes bad
              ;; formatting.
              (unless prev-heading-level
                (setq prev-heading-level heading-level))

              ;; Decide whether to update the prefix list and the previous
              ;; heading level.
              (cond
               ;; If we've moved to a greater level (further down the tree),
               ;; add the previous heading to the heading prefix list so
               ;; that we can prepend it to the current heading when
               ;; formatting.
               ((> heading-level prev-heading-level)
                (setq backwards-prefix-list (cons prev-heading-text
                                                  backwards-prefix-list)
                      prev-heading-level heading-level))
               ;; Otherwise, if we've moved to a lower level (higher up the
               ;; tree), and need to remove the most recently added prefix
               ;; from the list (i.e., go from '(c b a) back to '(b a)).
               ((< heading-level prev-heading-level)
                (setq backwards-prefix-list (last backwards-prefix-list
                                                  heading-level)
                      prev-heading-level heading-level)))

              ;; Regardless of what happens, update the previous heading text.
              (setq prev-heading-text heading-text)

              ;; Decide whether the previous formatted heading was the
              ;; default.
              (when (and (null default-heading)
                         (> line-number current-line-number))
                (setq default-heading (cl-first formatted-headings)))

              ;; Finally, add to list of formatted headings.
              ;; Create heading of form "L#: a/b/c" as:
              ;; - having a text property holding the line number
              ;; - prepended with a formatted line number,
              ;;   with the face ‘completions-annotations’.
              (push (propertize
                     (concat (string-join (reverse backwards-prefix-list) "/")
                             (and backwards-prefix-list "/")
                             heading-text)
                     'line-number line-number
                     'selectrum-candidate-display-prefix
                     (propertize
                      (format line-number-format line-number)
                      'face 'completions-annotations))
                    formatted-headings)))))
      ;; ...
      )
  #+end_src

  Here is a version in =loopy= which is more of a straight translation than a
  re-working:

  #+begin_src emacs-lisp
    ;; ...
    (loopy
     (with (buffer-lines (split-string (buffer-string) "\n"))
           (line-number-format
            (concat "L%0"
                    (number-to-string
                     (length (number-to-string (length buffer-lines))))
                    "d: ")))
     (loop (expr line-number 1 (1+ line-number))
           (list text-line buffer-lines)
           (when (string-match heading-regexp text-line)
             (expr heading-text
                   (match-string-no-properties 2 text-line))
             (expr heading-level
                   (length (match-string-no-properties 1 text-line)))

             ;; Decide whether to update the prefix list and the previous
             ;; heading level.
             (cond
              ;; If we've moved to a greater level (further down the tree),
              ;; add the previous heading to the heading prefix list so that
              ;; we can prepend it to the current heading when formatting.
              ((> heading-level (or prev-heading-level heading-level))

               (push-into backwards-prefix-list prev-heading-text)
               (expr prev-heading-level heading-level))
              ;; Otherwise, if we've moved to a lower level (higher up the
              ;; tree), and need to remove the most recently added prefix
              ;; from the list (i.e., go from '(c b a) back to '(b a)).
              ((< heading-level (or prev-heading-level heading-level))
               (expr backwards-prefix-list (last backwards-prefix-list
                                                 heading-level))
               (expr prev-heading-level heading-level)))

             ;; Regardless of what happens, update the previous heading
             ;; text.
             (expr prev-heading-text heading-text)

             ;; Decide whether the previous formatted heading was the
             ;; default.
             (when (and (null default-heading)
                        (> line-number current-line-number))
               (expr default-heading (car formatted-headings)))

             ;; Finally, add to list of formatted headings.
             ;; Create heading of form "L#: a/b/c" as:
             ;; - having a text property holding the line number
             ;; - prepended with a formatted line number,
             ;;   with the face ‘completions-annotations’.
             (push-into
              formatted-headings
              (propertize
               (concat (string-join
                        (reverse backwards-prefix-list) "/")
                       (and backwards-prefix-list "/")
                       heading-text)
               'line-number line-number
               'selectrum-candidate-display-prefix
               (propertize (format line-number-format line-number)
                           'face 'completions-annotations)))))
     (finally-return default-heading (nreverse formatted-headings)))
    ;; ...
  #+end_src

  In my opinion, the =loopy= version is a bit cleaner.  Even when following the
  same flow of logic, you still get the benefit of less typing with no loss in
  clarity.

  If one were writing code like this often (say, in a library), then the loop
  body could be simplified even further with [[#adding-custom-commands][custom commands]].

* Keyword and Command Index
  :PROPERTIES:
  :INDEX: fn
  :END:

* Variable Index
  :PROPERTIES:
  :INDEX: vr
  :END:

* Concept Index
  :PROPERTIES:
  :INDEX: cp
  :END:

* Footnotes

[fn:cl-loop]
[[https://www.gnu.org/software/emacs/manual/html_node/cl/Loop-Facility.html#Loop-Facility]]

[fn:seq]
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html]],
[[info:elisp#Sequence Functions]]

[fn:cl-lib]
[[https://www.gnu.org/software/emacs/manual/html_node/cl/index.html]], [[info:cl]]

[fn:sequence]
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequences-Arrays-Vectors.html]],
[[info:elisp#Sequences Arrays Vectors]]

[fn:sel-wiki]
https://github.com/raxod502/selectrum/wiki/Useful-Commands#jumping-to-lines
